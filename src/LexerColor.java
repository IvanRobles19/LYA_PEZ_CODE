/* The following code was generated by JFlex 1.4.3 on 26/06/22 23:02 */


import compilerTools.TextColor;
import java.awt.Color;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26/06/22 23:02 from the specification file
 * <tt>C:/Users/Ivanr/Desktop/6 Semestre/lenguajes y automatas/PEZ_CODE_1/src/LexerColor.flex</tt>
 */
class LexerColor {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\7\1\0\1\10\1\6\22\0\1\10\1\61\1\0"+
    "\1\0\2\0\1\63\1\3\1\55\1\55\1\12\1\56\1\5\1\57"+
    "\1\4\1\11\1\14\1\71\1\71\1\71\1\71\1\71\1\71\3\2"+
    "\1\5\1\5\1\61\1\62\1\60\2\0\1\22\1\43\1\54\1\21"+
    "\1\17\1\24\2\1\1\51\1\1\1\40\1\25\1\42\1\27\1\23"+
    "\1\52\1\1\1\20\1\26\1\44\1\41\1\16\3\1\1\53\1\55"+
    "\1\0\1\55\1\0\1\15\1\0\1\47\1\1\1\36\1\35\1\32"+
    "\1\67\1\46\1\1\1\37\1\72\1\1\1\45\1\31\1\50\1\34"+
    "\1\64\1\1\1\33\1\66\1\65\1\30\1\70\1\1\1\73\2\1"+
    "\1\55\1\63\1\55\123\0\1\13\17\0\1\13\7\0\1\13\3\0"+
    "\1\13\3\0\1\13\1\0\1\13\6\0\1\13\uff05\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\2\4\2\5\1\2"+
    "\23\1\1\6\1\5\1\7\1\1\1\7\4\1\1\0"+
    "\1\10\1\11\1\0\1\1\1\12\21\0\2\13\10\0"+
    "\2\11\7\0\1\14\11\0\1\15\1\0\1\13\12\0"+
    "\1\11\30\0\1\13\1\0\1\15\4\0\1\16\32\0"+
    "\1\7\2\0\1\17\20\0\1\2\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\74\0\360\0\74\0\u012c"+
    "\0\74\0\u0168\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0"+
    "\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0"+
    "\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\74\0\u0618\0\u0654"+
    "\0\u0654\0\74\0\u0690\0\u06cc\0\u0708\0\u0744\0\264\0\74"+
    "\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924"+
    "\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04"+
    "\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4"+
    "\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4"+
    "\0\74\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068"+
    "\0\74\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c"+
    "\0\u1248\0\u1284\0\u0bf4\0\u12c0\0\u12fc\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u0f00"+
    "\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8"+
    "\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8"+
    "\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8"+
    "\0\74\0\u1af4\0\74\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\74"+
    "\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4"+
    "\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4"+
    "\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184"+
    "\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\74\0\u22ec\0\u2328"+
    "\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508"+
    "\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\74\0\u26ac"+
    "\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\2\5\1\6\2\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\2\2\1\15\2\2\1\16"+
    "\1\17\1\2\1\20\1\2\1\21\1\22\1\23\2\2"+
    "\1\24\1\25\1\26\1\2\1\27\1\2\1\30\1\31"+
    "\1\32\1\33\1\34\3\2\1\35\1\36\1\11\1\37"+
    "\2\40\1\41\1\42\1\43\1\2\1\44\1\45\1\2"+
    "\1\3\2\2\75\0\1\46\1\3\10\0\1\46\1\3"+
    "\40\46\7\0\5\46\1\3\2\46\1\0\2\47\1\50"+
    "\2\0\3\47\3\0\41\47\7\0\10\47\7\0\1\7"+
    "\75\0\1\51\1\52\62\0\1\46\1\53\10\0\1\46"+
    "\1\2\40\46\7\0\5\46\1\53\2\46\1\0\1\54"+
    "\11\0\1\54\1\0\40\54\7\0\5\54\1\0\2\54"+
    "\17\0\1\55\77\0\1\56\25\0\1\57\44\0\1\60"+
    "\2\0\1\61\107\0\1\62\55\0\1\63\4\0\1\64"+
    "\10\0\1\65\62\0\1\66\133\0\1\67\2\0\1\70"+
    "\32\0\1\71\110\0\1\72\74\0\1\73\40\0\1\74"+
    "\75\0\1\75\56\0\1\76\11\0\1\77\54\0\1\76"+
    "\36\0\1\100\71\0\1\101\77\0\1\102\71\0\1\42"+
    "\62\0\1\103\127\0\1\104\76\0\1\42\44\0\1\105"+
    "\77\0\1\42\73\0\1\106\7\0\1\107\25\0\2\46"+
    "\10\0\42\46\7\0\10\46\6\51\1\110\1\111\64\51"+
    "\12\112\1\113\61\112\2\0\1\53\11\0\1\53\54\0"+
    "\1\53\3\0\2\54\10\0\42\54\7\0\10\54\20\0"+
    "\1\114\116\0\1\115\56\0\1\116\72\0\1\117\71\0"+
    "\1\120\123\0\1\121\64\0\1\122\60\0\1\123\104\0"+
    "\1\124\116\0\1\125\55\0\1\126\110\0\1\127\73\0"+
    "\1\130\44\0\1\131\123\0\1\132\7\0\1\133\11\0"+
    "\1\133\1\0\40\133\7\0\5\133\1\0\2\133\21\0"+
    "\1\134\54\0\1\76\1\0\1\135\7\0\1\76\54\0"+
    "\1\76\6\0\1\136\135\0\1\137\75\0\1\140\110\0"+
    "\1\141\35\0\1\142\124\0\1\42\52\0\1\143\104\0"+
    "\1\144\21\0\1\145\67\0\1\146\14\0\1\111\64\0"+
    "\12\112\1\147\72\112\1\150\1\147\61\112\21\0\1\151"+
    "\77\0\1\152\120\0\1\153\47\0\1\154\111\0\1\155"+
    "\100\0\1\156\54\0\1\157\60\0\1\160\123\0\1\161"+
    "\71\0\1\162\75\0\1\163\56\0\1\164\73\0\1\165"+
    "\73\0\1\166\112\0\1\167\24\0\1\135\11\0\1\135"+
    "\54\0\1\135\41\0\1\170\66\0\1\171\100\0\1\172"+
    "\100\0\1\173\77\0\1\174\72\0\1\175\73\0\1\176"+
    "\56\0\1\177\41\0\11\112\1\111\1\147\61\112\22\0"+
    "\1\200\70\0\1\201\73\0\1\202\77\0\1\203\72\0"+
    "\1\204\75\0\1\205\102\0\1\206\60\0\1\207\106\0"+
    "\1\210\70\0\1\125\113\0\1\211\110\0\1\212\56\0"+
    "\1\213\56\0\1\214\60\0\1\121\111\0\1\215\70\0"+
    "\1\216\130\0\1\217\23\0\1\220\111\0\1\221\102\0"+
    "\1\121\61\0\1\222\131\0\1\201\23\0\1\223\101\0"+
    "\1\224\73\0\1\225\115\0\1\226\56\0\1\227\62\0"+
    "\1\201\105\0\1\230\75\0\1\231\103\0\1\201\57\0"+
    "\1\232\74\0\1\201\106\0\1\233\73\0\1\234\47\0"+
    "\1\235\107\0\1\236\51\0\1\237\75\0\1\240\102\0"+
    "\1\241\111\0\1\152\103\0\1\241\34\0\1\242\115\0"+
    "\1\161\67\0\1\243\70\0\1\244\76\0\1\245\73\0"+
    "\1\246\65\0\1\121\132\0\1\144\32\0\1\247\70\0"+
    "\1\154\75\0\1\167\106\0\1\250\100\0\1\251\62\0"+
    "\1\252\57\0\1\253\111\0\1\254\72\0\1\255\100\0"+
    "\1\256\120\0\1\257\55\0\1\260\64\0\1\261\72\0"+
    "\1\262\67\0\1\263\100\0\1\264\67\0\1\265\106\0"+
    "\1\266\64\0\1\267\104\0\1\270\56\0\1\7\107\0"+
    "\1\271\56\0\1\272\126\0\1\273\75\0\1\210\54\0"+
    "\1\210\56\0\1\274\107\0\1\275\112\0\1\42\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10260];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\24\1\1\11\3\1\1\11\4\1\1\0\1\11\1\1"+
    "\1\0\2\1\21\0\2\1\10\0\1\1\1\11\7\0"+
    "\1\11\11\0\1\1\1\0\1\1\12\0\1\1\30\0"+
    "\1\11\1\0\1\11\4\0\1\11\32\0\1\1\2\0"+
    "\1\11\20\0\1\11\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private TextColor textColor(long start, int size, Color color){
        return new TextColor((int)start, size, color);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerColor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerColor(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TextColor yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { return textColor(yychar, yylength(), new Color(100, 149, 237));
          }
        case 16: break;
        case 9: 
          { return textColor(yychar, yylength(), new Color(146, 146, 146));
          }
        case 17: break;
        case 14: 
          { return textColor(yychar, yylength(), new Color(0, 144, 255));
          }
        case 18: break;
        case 3: 
          { return textColor(yychar, yylength(), new Color(0, 0, 0));
          }
        case 19: break;
        case 15: 
          { return textColor(yychar, yylength(), new Color(225, 181, 29));
          }
        case 20: break;
        case 8: 
          { return textColor(yychar, yylength(), new Color(0, 255, 0));
          }
        case 21: break;
        case 13: 
          { return textColor(yychar, yylength(), new Color(255, 0, 255));
          }
        case 22: break;
        case 4: 
          { /* Ignorar */
          }
        case 23: break;
        case 11: 
          { return textColor(yychar, yylength(), new Color(0, 0, 255));
          }
        case 24: break;
        case 10: 
          { return textColor(yychar, yylength(), new Color(255, 200, 0));
          }
        case 25: break;
        case 2: 
          { return textColor(yychar, yylength(), new Color(35, 120, 147));
          }
        case 26: break;
        case 12: 
          { return textColor(yychar, yylength(), new Color(255,175,175));
          }
        case 27: break;
        case 5: 
          { return textColor(yychar, yylength(), new Color(124, 252, 0));
          }
        case 28: break;
        case 1: 
          { return textColor(yychar, yylength(), new Color(225, 0, 0));
          }
        case 29: break;
        case 7: 
          { return textColor(yychar, yylength(), new Color(102, 205, 170));
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
