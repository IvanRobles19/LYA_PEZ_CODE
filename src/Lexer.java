/* The following code was generated by JFlex 1.4.3 on 26/06/22 23:01 */


import compilerTools.Token;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26/06/22 23:01 from the specification file
 * <tt>C:/Users/Ivanr/Desktop/6 Semestre/lenguajes y automatas/PEZ_CODE_1/src/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\7\1\0\1\10\1\6\22\0\1\10\1\70\1\0"+
    "\1\0\2\0\1\72\1\3\1\55\1\56\1\12\1\71\1\5\1\65"+
    "\1\4\1\11\1\14\1\100\1\100\1\100\1\100\1\100\1\100\3\2"+
    "\1\64\1\63\1\67\1\41\1\66\2\0\1\22\1\1\1\47\1\21"+
    "\1\17\1\24\2\1\1\44\1\1\1\40\1\25\1\43\1\27\1\23"+
    "\1\45\1\1\1\20\1\26\1\50\1\42\1\16\3\1\1\46\1\61"+
    "\1\0\1\62\1\0\1\15\1\0\1\53\1\1\1\36\1\35\1\32"+
    "\1\76\1\52\1\1\1\37\1\101\1\1\1\51\1\31\1\54\1\34"+
    "\1\73\1\1\1\33\1\75\1\74\1\30\1\77\1\1\1\102\2\1"+
    "\1\57\1\72\1\60\123\0\1\13\17\0\1\13\7\0\1\13\3\0"+
    "\1\13\3\0\1\13\1\0\1\13\6\0\1\13\uff05\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\2\6"+
    "\1\7\1\10\1\3\14\2\1\1\7\2\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\24\3\2\1\26\1\3\1\0"+
    "\1\27\1\6\1\0\1\30\1\0\1\30\1\31\16\2"+
    "\1\32\2\2\2\33\3\2\1\34\1\0\1\35\1\36"+
    "\1\37\1\2\1\40\2\2\2\0\3\2\1\41\14\2"+
    "\1\33\1\0\3\2\1\42\4\2\1\0\1\6\14\2"+
    "\1\43\13\2\1\44\3\2\1\45\5\2\1\46\5\2"+
    "\1\47\1\2\1\50\4\2\1\51\3\2\1\43\2\2"+
    "\1\52\10\2\1\53\1\2\1\54\1\2\1\55\1\2"+
    "\1\56\5\2\1\57\5\2\1\60\1\61\4\2\1\62"+
    "\6\2\1\63\1\2\1\64\3\2\1\65\1\66\2\2"+
    "\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\103\0\103\0\u014f"+
    "\0\103\0\u0192\0\103\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1"+
    "\0\u0324\0\u0367\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9"+
    "\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711"+
    "\0\103\0\103\0\103\0\103\0\103\0\103\0\103\0\103"+
    "\0\u0754\0\u0797\0\u07da\0\u081d\0\103\0\103\0\u0860\0\u08a3"+
    "\0\u08e6\0\u0929\0\u096c\0\u010c\0\103\0\u09af\0\u09f2\0\u0a35"+
    "\0\u096c\0\103\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7"+
    "\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf"+
    "\0\u0e22\0\103\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4"+
    "\0\u0ff7\0\206\0\u103a\0\103\0\103\0\103\0\u107d\0\206"+
    "\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\206"+
    "\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a"+
    "\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15b9\0\u15fc\0\u163f"+
    "\0\u1682\0\103\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1146"+
    "\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9"+
    "\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\103\0\u1b38\0\u1b7b\0\u1bbe"+
    "\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6"+
    "\0\206\0\u1e19\0\u1e5c\0\u1e9f\0\206\0\u1ee2\0\u1f25\0\u1f68"+
    "\0\u1fab\0\u1fee\0\206\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d"+
    "\0\206\0\u2180\0\206\0\u21c3\0\u2206\0\u2249\0\u228c\0\206"+
    "\0\u22cf\0\u2312\0\u2355\0\206\0\u2398\0\u23db\0\206\0\u241e"+
    "\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\206"+
    "\0\u2636\0\u2679\0\u26bc\0\206\0\u26ff\0\206\0\u2742\0\u2785"+
    "\0\u27c8\0\u280b\0\u284e\0\206\0\u2891\0\u28d4\0\u2917\0\u295a"+
    "\0\u299d\0\206\0\206\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\206"+
    "\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\206\0\u2c7e"+
    "\0\206\0\u2cc1\0\u2d04\0\u2d47\0\206\0\206\0\u2d8a\0\u2dcd"+
    "\0\206";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11"+
    "\1\12\1\13\1\3\1\14\1\15\1\16\2\3\1\17"+
    "\2\3\1\20\1\21\1\3\1\22\1\3\1\23\1\24"+
    "\1\25\2\3\1\26\1\27\1\30\1\31\1\3\1\32"+
    "\3\3\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\3\1\60"+
    "\1\61\1\3\1\4\2\3\104\0\2\3\10\0\26\3"+
    "\1\0\13\3\16\0\10\3\1\0\1\62\1\4\1\0"+
    "\1\63\6\0\1\62\1\4\24\62\1\0\13\62\16\0"+
    "\5\62\1\4\2\62\1\0\2\64\1\65\2\0\3\64"+
    "\3\0\25\64\1\0\13\64\16\0\10\64\7\0\1\11"+
    "\104\0\1\66\1\67\71\0\1\62\1\70\1\0\1\71"+
    "\6\0\1\62\1\72\24\62\1\0\13\62\16\0\5\62"+
    "\1\70\2\62\1\0\1\73\1\3\10\0\1\73\1\3"+
    "\24\73\1\0\13\73\16\0\5\73\1\3\2\73\1\0"+
    "\2\3\10\0\4\3\1\74\21\3\1\0\13\3\16\0"+
    "\10\3\1\0\2\3\10\0\26\3\1\0\2\3\1\75"+
    "\10\3\16\0\10\3\1\0\2\3\10\0\7\3\1\76"+
    "\16\3\1\0\13\3\16\0\10\3\1\0\2\3\10\0"+
    "\26\3\1\0\1\77\12\3\16\0\10\3\1\0\2\3"+
    "\10\0\10\3\1\100\4\3\1\101\10\3\1\0\1\102"+
    "\12\3\16\0\10\3\1\0\2\3\10\0\15\3\1\103"+
    "\10\3\1\0\13\3\16\0\10\3\1\0\2\3\10\0"+
    "\26\3\1\0\13\3\16\0\4\3\1\104\2\3\1\105"+
    "\1\0\2\3\10\0\17\3\1\106\6\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\26\3\1\0\11\3"+
    "\1\107\1\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\12\3\1\110\16\0\10\3\1\0\2\3\10\0"+
    "\2\3\1\111\23\3\1\0\13\3\16\0\10\3\41\0"+
    "\1\112\42\0\2\3\10\0\4\3\1\113\21\3\1\0"+
    "\13\3\16\0\10\3\1\0\2\3\10\0\10\3\1\114"+
    "\15\3\1\0\13\3\16\0\10\3\1\0\1\3\1\115"+
    "\10\0\1\3\1\116\24\3\1\0\13\3\16\0\5\3"+
    "\1\115\2\3\1\0\2\3\10\0\21\3\1\117\4\3"+
    "\1\0\13\3\16\0\10\3\1\0\2\3\10\0\17\3"+
    "\1\120\6\3\1\0\13\3\16\0\10\3\1\0\2\3"+
    "\10\0\23\3\1\121\2\3\1\0\13\3\16\0\10\3"+
    "\1\0\2\3\10\0\21\3\1\122\4\3\1\0\13\3"+
    "\16\0\10\3\65\0\1\123\56\0\1\124\102\0\1\125"+
    "\102\0\1\126\42\0\2\3\10\0\20\3\1\127\5\3"+
    "\1\0\13\3\16\0\10\3\1\0\2\3\10\0\24\3"+
    "\1\130\1\3\1\0\13\3\16\0\10\3\1\0\2\3"+
    "\10\0\24\3\1\131\1\3\1\0\11\3\1\132\1\3"+
    "\16\0\10\3\1\0\2\62\10\0\26\62\1\0\13\62"+
    "\16\0\10\62\2\0\1\63\11\0\1\63\63\0\1\63"+
    "\2\0\6\66\1\10\1\11\73\66\12\133\1\134\70\133"+
    "\2\0\1\70\11\0\1\70\63\0\1\70\3\0\2\73"+
    "\10\0\26\73\1\0\13\73\16\0\10\73\1\0\2\3"+
    "\10\0\5\3\1\135\20\3\1\0\13\3\16\0\10\3"+
    "\1\0\2\3\10\0\13\3\1\136\12\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\12\3\1\137\13\3"+
    "\1\0\13\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\4\3\1\140\6\3\16\0\10\3\1\0\2\3"+
    "\10\0\26\3\1\0\6\3\1\141\4\3\16\0\10\3"+
    "\1\0\2\3\10\0\16\3\1\142\7\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\26\3\1\0\1\3"+
    "\1\143\11\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\13\3\16\0\1\3\1\144\6\3\1\0\2\3"+
    "\10\0\26\3\1\0\11\3\1\145\1\3\16\0\10\3"+
    "\1\0\2\3\10\0\26\3\1\0\13\3\16\0\1\146"+
    "\7\3\1\0\2\3\10\0\26\3\1\0\13\3\16\0"+
    "\1\147\7\3\1\0\2\3\10\0\22\3\1\150\3\3"+
    "\1\0\13\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\13\3\16\0\1\3\1\151\6\3\1\0\1\152"+
    "\1\3\10\0\1\152\1\3\24\152\1\0\13\152\16\0"+
    "\5\152\1\3\2\152\1\0\2\3\10\0\6\3\1\153"+
    "\17\3\1\0\13\3\16\0\10\3\1\0\2\3\10\0"+
    "\14\3\1\154\11\3\1\0\13\3\16\0\10\3\1\0"+
    "\1\3\1\115\1\0\1\155\6\0\1\3\1\115\24\3"+
    "\1\0\13\3\16\0\5\3\1\115\2\3\1\0\2\3"+
    "\1\0\1\156\6\0\26\3\1\0\13\3\16\0\10\3"+
    "\1\0\2\3\10\0\26\3\1\0\10\3\1\157\2\3"+
    "\16\0\10\3\1\0\2\3\10\0\26\3\1\0\12\3"+
    "\1\160\16\0\10\3\1\0\2\3\10\0\26\3\1\0"+
    "\13\3\16\0\1\3\1\161\6\3\66\0\1\162\15\0"+
    "\2\3\10\0\24\3\1\163\1\3\1\0\13\3\16\0"+
    "\10\3\1\0\2\3\10\0\26\3\1\0\12\3\1\164"+
    "\16\0\6\3\1\165\1\3\1\0\2\3\10\0\26\3"+
    "\1\0\13\3\16\0\2\3\1\166\5\3\12\133\1\167"+
    "\101\133\1\170\1\167\70\133\1\0\2\3\10\0\6\3"+
    "\1\171\17\3\1\0\13\3\16\0\10\3\1\0\2\3"+
    "\10\0\26\3\1\0\3\3\1\172\7\3\16\0\10\3"+
    "\1\0\2\3\10\0\13\3\1\173\12\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\26\3\1\0\2\3"+
    "\1\174\10\3\16\0\10\3\1\0\2\3\10\0\17\3"+
    "\1\175\6\3\1\0\13\3\16\0\10\3\1\0\2\3"+
    "\10\0\4\3\1\176\21\3\1\0\13\3\16\0\10\3"+
    "\1\0\2\3\10\0\26\3\1\0\11\3\1\177\1\3"+
    "\16\0\10\3\1\0\2\3\10\0\26\3\1\0\7\3"+
    "\1\200\3\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\11\3\1\201\1\3\16\0\10\3\1\0\2\3"+
    "\10\0\17\3\1\202\6\3\1\0\13\3\16\0\10\3"+
    "\1\0\2\3\10\0\17\3\1\203\6\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\17\3\1\204\6\3"+
    "\1\0\13\3\16\0\10\3\1\0\1\152\1\3\10\0"+
    "\1\152\1\3\24\152\1\205\13\152\16\0\5\152\1\3"+
    "\2\152\1\0\2\3\10\0\26\3\1\0\2\3\1\206"+
    "\10\3\16\0\10\3\1\0\2\3\10\0\26\3\1\0"+
    "\6\3\1\207\4\3\16\0\10\3\2\0\1\155\11\0"+
    "\1\155\63\0\1\155\3\0\2\3\10\0\24\3\1\210"+
    "\1\3\1\0\13\3\16\0\10\3\1\0\2\3\10\0"+
    "\17\3\1\211\6\3\1\0\13\3\16\0\10\3\1\0"+
    "\2\3\10\0\24\3\1\212\1\3\1\0\13\3\16\0"+
    "\10\3\1\0\2\3\10\0\26\3\1\0\12\3\1\213"+
    "\16\0\10\3\1\0\2\3\10\0\26\3\1\0\11\3"+
    "\1\214\1\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\11\3\1\215\1\3\16\0\10\3\1\0\2\3"+
    "\10\0\17\3\1\216\6\3\1\0\13\3\16\0\10\3"+
    "\11\133\1\11\1\167\70\133\1\0\2\3\10\0\7\3"+
    "\1\217\16\3\1\0\13\3\16\0\10\3\1\0\2\3"+
    "\10\0\4\3\1\220\21\3\1\0\13\3\16\0\10\3"+
    "\1\0\2\3\10\0\10\3\1\221\15\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\11\3\1\222\14\3"+
    "\1\0\13\3\16\0\10\3\1\0\2\3\10\0\20\3"+
    "\1\223\5\3\1\0\13\3\16\0\10\3\1\0\2\3"+
    "\10\0\5\3\1\224\20\3\1\0\13\3\16\0\10\3"+
    "\1\0\2\3\10\0\20\3\1\225\5\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\15\3\1\226\10\3"+
    "\1\0\13\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\12\3\1\227\16\0\10\3\1\0\2\3\10\0"+
    "\26\3\1\0\13\3\16\0\1\3\1\230\6\3\1\0"+
    "\2\3\10\0\26\3\1\0\12\3\1\231\16\0\10\3"+
    "\1\0\2\3\10\0\20\3\1\232\5\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\5\3\1\233\20\3"+
    "\1\0\13\3\16\0\10\3\1\0\2\3\10\0\5\3"+
    "\1\234\20\3\1\0\13\3\16\0\10\3\1\0\2\3"+
    "\10\0\23\3\1\235\2\3\1\0\13\3\16\0\10\3"+
    "\1\0\2\3\10\0\20\3\1\236\5\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\26\3\1\0\13\3"+
    "\16\0\4\3\1\237\3\3\1\0\2\3\10\0\23\3"+
    "\1\240\2\3\1\0\13\3\16\0\10\3\1\0\2\3"+
    "\10\0\26\3\1\0\7\3\1\241\3\3\16\0\10\3"+
    "\1\0\2\3\10\0\20\3\1\242\5\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\26\3\1\0\13\3"+
    "\16\0\5\3\1\243\2\3\1\0\2\3\10\0\6\3"+
    "\1\244\17\3\1\0\13\3\16\0\10\3\1\0\2\3"+
    "\10\0\14\3\1\245\11\3\1\0\13\3\16\0\10\3"+
    "\1\0\2\3\10\0\26\3\1\0\2\3\1\246\10\3"+
    "\16\0\10\3\1\0\2\3\10\0\21\3\1\247\4\3"+
    "\1\0\13\3\16\0\10\3\1\0\2\3\10\0\10\3"+
    "\1\250\15\3\1\0\13\3\16\0\10\3\1\0\2\3"+
    "\10\0\26\3\1\0\11\3\1\251\1\3\16\0\10\3"+
    "\1\0\2\3\10\0\22\3\1\252\3\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\24\3\1\253\1\3"+
    "\1\0\13\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\11\3\1\254\1\3\16\0\10\3\1\0\2\3"+
    "\10\0\20\3\1\255\5\3\1\0\13\3\16\0\10\3"+
    "\1\0\2\3\10\0\10\3\1\256\15\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\21\3\1\257\4\3"+
    "\1\0\13\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\11\3\1\260\1\3\16\0\10\3\1\0\2\3"+
    "\10\0\26\3\1\0\11\3\1\261\1\3\16\0\10\3"+
    "\1\0\2\3\10\0\24\3\1\262\1\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\2\3\1\263\23\3"+
    "\1\0\13\3\16\0\10\3\1\0\2\3\10\0\4\3"+
    "\1\264\21\3\1\0\13\3\16\0\10\3\1\0\2\3"+
    "\10\0\13\3\1\265\12\3\1\0\13\3\16\0\10\3"+
    "\1\0\2\3\10\0\26\3\1\0\5\3\1\266\5\3"+
    "\16\0\10\3\1\0\2\3\10\0\2\3\1\267\23\3"+
    "\1\0\13\3\16\0\10\3\1\0\2\3\10\0\20\3"+
    "\1\270\5\3\1\0\13\3\16\0\10\3\1\0\2\3"+
    "\10\0\24\3\1\271\1\3\1\0\13\3\16\0\10\3"+
    "\1\0\2\3\10\0\20\3\1\272\5\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\15\3\1\273\10\3"+
    "\1\0\13\3\16\0\10\3\1\0\2\3\10\0\12\3"+
    "\1\274\13\3\1\0\13\3\16\0\10\3\1\0\2\3"+
    "\10\0\20\3\1\275\5\3\1\0\13\3\16\0\10\3"+
    "\1\0\2\3\10\0\20\3\1\276\5\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\26\3\1\0\13\3"+
    "\16\0\1\277\7\3\1\0\2\3\10\0\10\3\1\300"+
    "\15\3\1\0\13\3\16\0\10\3\1\0\2\3\10\0"+
    "\5\3\1\173\20\3\1\0\13\3\16\0\10\3\1\0"+
    "\2\3\10\0\7\3\1\301\16\3\1\0\13\3\16\0"+
    "\10\3\1\0\2\3\10\0\7\3\1\302\16\3\1\0"+
    "\13\3\16\0\10\3\1\0\2\3\10\0\22\3\1\303"+
    "\3\3\1\0\13\3\16\0\10\3\1\0\2\3\10\0"+
    "\20\3\1\304\5\3\1\0\13\3\16\0\10\3\1\0"+
    "\2\3\10\0\26\3\1\0\1\3\1\305\11\3\16\0"+
    "\10\3\1\0\2\3\10\0\16\3\1\306\7\3\1\0"+
    "\13\3\16\0\10\3\1\0\2\3\10\0\2\3\1\307"+
    "\23\3\1\0\13\3\16\0\10\3\1\0\2\3\10\0"+
    "\26\3\1\0\11\3\1\310\1\3\16\0\10\3\1\0"+
    "\2\3\10\0\20\3\1\311\5\3\1\0\13\3\16\0"+
    "\10\3\1\0\2\3\10\0\5\3\1\312\20\3\1\0"+
    "\13\3\16\0\10\3\1\0\2\3\10\0\5\3\1\313"+
    "\20\3\1\0\13\3\16\0\10\3\1\0\2\3\10\0"+
    "\17\3\1\314\6\3\1\0\13\3\16\0\10\3\1\0"+
    "\2\3\10\0\24\3\1\315\1\3\1\0\13\3\16\0"+
    "\10\3\1\0\2\3\10\0\26\3\1\0\13\3\16\0"+
    "\1\316\7\3\1\0\2\3\10\0\26\3\1\0\10\3"+
    "\1\317\2\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\7\3\1\320\3\3\16\0\10\3\1\0\2\3"+
    "\10\0\24\3\1\321\1\3\1\0\13\3\16\0\10\3"+
    "\1\0\2\3\10\0\23\3\1\322\2\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\17\3\1\323\6\3"+
    "\1\0\13\3\16\0\10\3\1\0\2\3\10\0\24\3"+
    "\1\324\1\3\1\0\13\3\16\0\10\3\1\0\2\3"+
    "\10\0\20\3\1\325\5\3\1\0\13\3\16\0\10\3"+
    "\1\0\2\3\10\0\26\3\1\0\10\3\1\326\2\3"+
    "\16\0\10\3\1\0\2\3\10\0\24\3\1\327\1\3"+
    "\1\0\13\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\12\3\1\330\16\0\10\3\1\0\2\3\10\0"+
    "\20\3\1\331\5\3\1\0\13\3\16\0\10\3\1\0"+
    "\2\3\10\0\26\3\1\0\11\3\1\332\1\3\16\0"+
    "\10\3\1\0\2\3\10\0\17\3\1\333\6\3\1\0"+
    "\13\3\16\0\10\3\1\0\2\3\10\0\26\3\1\0"+
    "\13\3\16\0\1\3\1\334\6\3\1\0\2\3\10\0"+
    "\26\3\1\0\13\3\16\0\3\3\1\335\4\3\1\0"+
    "\2\3\10\0\26\3\1\0\12\3\1\336\16\0\10\3"+
    "\1\0\2\3\10\0\20\3\1\337\5\3\1\0\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\26\3\1\0\11\3"+
    "\1\340\1\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\13\3\16\0\2\3\1\341\5\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11792];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\1\1\1\11\1\1\1\11"+
    "\25\1\10\11\4\1\2\11\5\1\1\0\1\11\1\1"+
    "\1\0\1\1\1\0\1\11\17\1\1\11\10\1\1\0"+
    "\3\11\4\1\2\0\21\1\1\0\3\1\1\11\4\1"+
    "\1\0\15\1\1\11\134\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return token(yytext(), "PUNTO", yyline, yycolumn);
          }
        case 55: break;
        case 3: 
          { return token(yytext(), "N_ENTERO", yyline, yycolumn);
          }
        case 56: break;
        case 46: 
          { return token (yytext(), "ACTIVAR", yyline, yycolumn);
          }
        case 57: break;
        case 5: 
          { return token(yytext(), "COMA", yyline, yycolumn);
          }
        case 58: break;
        case 44: 
          { return token(yytext(), "REPETIR", yyline, yycolumn);
          }
        case 59: break;
        case 30: 
          { return token(yytext(), "MENOR_IGUAL_QUE", yyline, yycolumn);
          }
        case 60: break;
        case 21: 
          { return token(yytext(), "SUMA", yyline, yycolumn);
          }
        case 61: break;
        case 51: 
          { return token(yytext(), "N_DECIMAL", yyline, yycolumn);
          }
        case 62: break;
        case 35: 
          { return token(yytext(), "CADENA", yyline, yycolumn);
          }
        case 63: break;
        case 17: 
          { return token(yytext(), "RESTA", yyline, yycolumn);
          }
        case 64: break;
        case 52: 
          { return token(yytext(), "DETENER_REPETIR", yyline, yycolumn);
          }
        case 65: break;
        case 42: 
          { return token(yytext(), "LOGICO", yyline, yycolumn);
          }
        case 66: break;
        case 33: 
          { return token(yytext(), "ACCION_LUZ", yyline, yycolumn);
          }
        case 67: break;
        case 43: 
          { return token(yytext(), "EVALUAR", yyline, yycolumn);
          }
        case 68: break;
        case 38: 
          { return token(yytext(), "ACCION_MEDIR", yyline, yycolumn);
          }
        case 69: break;
        case 36: 
          { return token(yytext(), "BOOL", yyline, yycolumn);
          }
        case 70: break;
        case 32: 
          { return token(yytext(), "ESTRUCTURA_SI", yyline, yycolumn);
          }
        case 71: break;
        case 53: 
          { return token(yytext(), "GENERAR_GRAF", yyline, yycolumn);
          }
        case 72: break;
        case 25: 
          { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
          }
        case 73: break;
        case 45: 
          { return token(yytext(), "ACCION_CONTROL", yyline, yycolumn);
          }
        case 74: break;
        case 24: 
          { return token(yytext(), "ERROR_1", yyline, yycolumn);
          }
        case 75: break;
        case 50: 
          { return token(yytext(), "INICIO", yyline, yycolumn);
          }
        case 76: break;
        case 11: 
          { return token(yytext(), "LLAVE_A", yyline, yycolumn);
          }
        case 77: break;
        case 41: 
          { return token(yytext(), "TIPO_DATO", yyline, yycolumn);
          }
        case 78: break;
        case 22: 
          { return token(yytext(), "ERROR_2", yyline, yycolumn);
          }
        case 79: break;
        case 18: 
          { return token(yytext(), "MAYOR_QUE", yyline, yycolumn);
          }
        case 80: break;
        case 54: 
          { return token(yytext(), "FUNCION FIJAR_ORIGEN", yyline, yycolumn);
          }
        case 81: break;
        case 27: 
          { return token(yytext(), "TEMPERATURA", yyline, yycolumn);
          }
        case 82: break;
        case 48: 
          { return token(yytext(), "ACCION_DISPENSAR", yyline, yycolumn);
          }
        case 83: break;
        case 2: 
          { return token(yytext(), "ERROR_3", yyline, yycolumn);
          }
        case 84: break;
        case 12: 
          { return token(yytext(), "LLAVE_C", yyline, yycolumn);
          }
        case 85: break;
        case 29: 
          { return token(yytext(), "MAYOR_IGUAL_QUE", yyline, yycolumn);
          }
        case 86: break;
        case 6: 
          { /* Ignorar */
          }
        case 87: break;
        case 26: 
          { return token(yytext(), "IGUAL_QUE", yyline, yycolumn);
          }
        case 88: break;
        case 9: 
          { return token(yytext(), "PARENTESIS_A", yyline, yycolumn);
          }
        case 89: break;
        case 20: 
          { return token(yytext(), "OP_LOGICO", yyline, yycolumn);
          }
        case 90: break;
        case 40: 
          { return token(yytext(), "FASES", yyline, yycolumn);
          }
        case 91: break;
        case 23: 
          { return token(yytext(), "TEXTO", yyline, yycolumn);
          }
        case 92: break;
        case 49: 
          { return token(yytext(), "ACCION_NOTIFICAR", yyline, yycolumn);
          }
        case 93: break;
        case 15: 
          { return token(yytext(), "PUNTOyCOMA", yyline, yycolumn);
          }
        case 94: break;
        case 7: 
          { return token(yytext(), "DIVISION", yyline, yycolumn);
          }
        case 95: break;
        case 47: 
          { return token(yytext(), "EXPANDIR", yyline, yycolumn);
          }
        case 96: break;
        case 31: 
          { return token(yytext(), "DIFERENTE_DE", yyline, yycolumn);
          }
        case 97: break;
        case 19: 
          { return token(yytext(), "MENOR_QUE", yyline, yycolumn);
          }
        case 98: break;
        case 10: 
          { return token(yytext(), "PARENTESIS_C", yyline, yycolumn);
          }
        case 99: break;
        case 39: 
          { return token(yytext(), "FINAL", yyline, yycolumn);
          }
        case 100: break;
        case 28: 
          { return token(yytext(), "ESTRUCTURA_SI_NO", yyline, yycolumn);
          }
        case 101: break;
        case 1: 
          { return token(yytext(), "ERROR", yyline, yycolumn);
          }
        case 102: break;
        case 13: 
          { return token(yytext(), "CORCHETE_A", yyline, yycolumn);
          }
        case 103: break;
        case 34: 
          { return token(yytext(), "Op_Asig", yyline, yycolumn);
          }
        case 104: break;
        case 16: 
          { return token(yytext(), "DOBLE_PUNTO", yyline, yycolumn);
          }
        case 105: break;
        case 8: 
          { return token(yytext(), "MULTIPLICACION", yyline, yycolumn);
          }
        case 106: break;
        case 37: 
          { return token(yytext(), "FUNCION_MUTAR", yyline, yycolumn);
          }
        case 107: break;
        case 14: 
          { return token(yytext(), "CORCHETE_C", yyline, yycolumn);
          }
        case 108: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
