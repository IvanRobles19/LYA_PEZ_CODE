/* The following code was generated by JFlex 1.4.3 on 05/06/22 22:02 */


import compilerTools.Token;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 05/06/22 22:02 from the specification file
 * <tt>C:/Users/Ivanr/Desktop/ProyectoAutomatas/src/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\7\1\0\1\10\1\6\22\0\1\10\1\71\1\0"+
    "\1\0\2\0\1\73\1\3\1\56\1\57\1\12\1\72\1\5\1\66"+
    "\1\4\1\11\1\14\1\101\1\101\1\101\1\101\1\101\1\101\3\2"+
    "\1\65\1\64\1\70\1\41\1\67\2\0\1\22\1\43\1\51\1\21"+
    "\1\17\1\24\2\1\1\45\1\1\1\40\1\25\1\44\1\27\1\23"+
    "\1\46\1\1\1\20\1\26\1\42\1\47\1\16\3\1\1\50\1\62"+
    "\1\0\1\63\1\0\1\15\1\0\1\54\1\1\1\36\1\35\1\32"+
    "\1\77\1\53\1\1\1\37\1\102\1\1\1\52\1\31\1\55\1\34"+
    "\1\74\1\1\1\33\1\76\1\75\1\30\1\100\1\1\1\103\2\1"+
    "\1\60\1\73\1\61\123\0\1\13\17\0\1\13\7\0\1\13\3\0"+
    "\1\13\3\0\1\13\1\0\1\13\6\0\1\13\uff05\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\2\6"+
    "\1\7\1\10\1\3\15\2\1\1\6\2\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\24\3\2\1\26\1\0\1\27"+
    "\1\6\1\0\2\30\1\31\20\2\1\32\2\33\5\2"+
    "\1\0\1\34\1\35\1\36\1\2\1\37\2\2\2\0"+
    "\6\2\1\40\11\2\1\33\1\0\5\2\1\41\5\2"+
    "\1\0\1\6\16\2\1\42\6\2\1\37\5\2\1\43"+
    "\1\2\1\44\3\2\1\45\5\2\1\46\5\2\1\47"+
    "\1\2\1\50\10\2\1\42\2\2\1\51\10\2\1\52"+
    "\1\2\1\53\1\2\1\54\1\2\1\55\5\2\1\56"+
    "\5\2\1\57\1\60\4\2\1\61\6\2\1\62\1\2"+
    "\1\63\3\2\1\64\1\65\2\2\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\104\0\104\0\u0154"+
    "\0\104\0\u0198\0\104\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec"+
    "\0\u0330\0\u0374\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c"+
    "\0\u0550\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\104\0\104"+
    "\0\u0770\0\u07b4\0\u07f8\0\u083c\0\104\0\104\0\u0880\0\u08c4"+
    "\0\u0908\0\u094c\0\u0110\0\104\0\u0990\0\u09d4\0\u0a18\0\104"+
    "\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38"+
    "\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58"+
    "\0\u0e9c\0\104\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034"+
    "\0\u1078\0\u10bc\0\104\0\104\0\104\0\u1100\0\u1144\0\u1188"+
    "\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8"+
    "\0\u13ec\0\210\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584"+
    "\0\u15c8\0\u160c\0\u1650\0\u1694\0\u1694\0\u16d8\0\u171c\0\u1760"+
    "\0\u17a4\0\u17e8\0\104\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c"+
    "\0\u1980\0\u1210\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18"+
    "\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38"+
    "\0\104\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\210"+
    "\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\210\0\u2068\0\210"+
    "\0\u20ac\0\u20f0\0\u2134\0\210\0\u2178\0\u21bc\0\u2200\0\u2244"+
    "\0\u2288\0\210\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\210"+
    "\0\u2420\0\210\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8"+
    "\0\u25fc\0\u2640\0\210\0\u2684\0\u26c8\0\210\0\u270c\0\u2750"+
    "\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\210\0\u292c"+
    "\0\u2970\0\u29b4\0\210\0\u29f8\0\210\0\u2a3c\0\u2a80\0\u2ac4"+
    "\0\u2b08\0\u2b4c\0\210\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0"+
    "\0\210\0\210\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\210\0\u2df4"+
    "\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\210\0\u2f8c\0\210"+
    "\0\u2fd0\0\u3014\0\u3058\0\210\0\210\0\u309c\0\u30e0\0\210";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11"+
    "\1\12\1\13\1\3\1\14\1\15\1\16\1\17\1\3"+
    "\1\20\2\3\1\21\1\22\1\3\1\23\1\3\1\24"+
    "\1\25\1\26\2\3\1\27\1\30\1\31\1\32\1\33"+
    "\1\3\1\34\4\3\1\35\1\36\1\37\1\40\1\3"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\3"+
    "\1\60\1\61\1\3\1\4\2\3\105\0\2\3\10\0"+
    "\26\3\1\0\14\3\16\0\10\3\1\0\1\62\1\4"+
    "\10\0\1\62\1\4\24\62\1\0\14\62\16\0\5\62"+
    "\1\4\2\62\1\0\2\63\1\64\2\0\3\63\3\0"+
    "\25\63\1\0\14\63\16\0\10\63\7\0\1\11\105\0"+
    "\1\65\1\66\72\0\1\62\1\67\10\0\1\62\1\70"+
    "\24\62\1\0\14\62\16\0\5\62\1\67\2\62\1\0"+
    "\1\71\1\3\10\0\1\71\1\3\24\71\1\0\14\71"+
    "\16\0\5\71\1\3\2\71\1\0\2\3\10\0\4\3"+
    "\1\72\21\3\1\0\14\3\16\0\10\3\1\0\2\3"+
    "\10\0\14\3\1\73\11\3\1\0\14\3\16\0\10\3"+
    "\1\0\2\3\10\0\10\3\1\74\15\3\1\0\3\3"+
    "\1\75\10\3\16\0\10\3\1\0\2\3\10\0\7\3"+
    "\1\76\2\3\1\77\13\3\1\0\14\3\16\0\10\3"+
    "\1\0\2\3\10\0\26\3\1\0\5\3\1\100\6\3"+
    "\16\0\10\3\1\0\2\3\10\0\10\3\1\101\4\3"+
    "\1\102\10\3\1\0\14\3\16\0\10\3\1\0\2\3"+
    "\10\0\15\3\1\103\10\3\1\0\14\3\16\0\10\3"+
    "\1\0\2\3\10\0\26\3\1\0\14\3\16\0\4\3"+
    "\1\104\2\3\1\105\1\0\2\3\10\0\17\3\1\106"+
    "\6\3\1\0\14\3\16\0\10\3\1\0\2\3\10\0"+
    "\26\3\1\0\12\3\1\107\1\3\16\0\10\3\1\0"+
    "\2\3\10\0\26\3\1\0\13\3\1\110\16\0\10\3"+
    "\1\0\2\3\10\0\2\3\1\111\23\3\1\0\14\3"+
    "\16\0\10\3\41\0\1\112\43\0\1\3\1\113\10\0"+
    "\1\3\1\114\24\3\1\0\14\3\16\0\5\3\1\113"+
    "\2\3\1\0\2\3\10\0\4\3\1\115\21\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\10\3\1\116"+
    "\15\3\1\0\14\3\16\0\10\3\1\0\2\3\10\0"+
    "\21\3\1\117\4\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\17\3\1\120\6\3\1\0\14\3\16\0"+
    "\10\3\1\0\2\3\10\0\23\3\1\121\2\3\1\0"+
    "\14\3\16\0\10\3\66\0\1\122\56\0\1\123\103\0"+
    "\1\124\103\0\1\125\43\0\2\3\10\0\20\3\1\126"+
    "\5\3\1\0\14\3\16\0\10\3\1\0\2\3\10\0"+
    "\24\3\1\127\1\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\24\3\1\130\1\3\1\0\12\3\1\131"+
    "\1\3\16\0\10\3\1\0\2\62\10\0\26\62\1\0"+
    "\14\62\16\0\10\62\6\65\1\10\1\11\74\65\12\132"+
    "\1\133\71\132\2\0\1\67\11\0\1\67\64\0\1\67"+
    "\3\0\2\71\10\0\26\71\1\0\14\71\16\0\10\71"+
    "\1\0\2\3\10\0\5\3\1\134\20\3\1\0\14\3"+
    "\16\0\10\3\1\0\2\3\10\0\26\3\1\0\1\135"+
    "\13\3\16\0\10\3\1\0\2\3\10\0\26\3\1\0"+
    "\1\3\1\136\12\3\16\0\10\3\1\0\2\3\10\0"+
    "\13\3\1\137\12\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\12\3\1\140\13\3\1\0\14\3\16\0"+
    "\10\3\1\0\2\3\10\0\10\3\1\141\15\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\26\3\1\0"+
    "\6\3\1\142\5\3\16\0\10\3\1\0\2\3\10\0"+
    "\26\3\1\0\1\143\13\3\16\0\10\3\1\0\2\3"+
    "\10\0\16\3\1\144\7\3\1\0\14\3\16\0\10\3"+
    "\1\0\2\3\10\0\26\3\1\0\14\3\16\0\1\3"+
    "\1\145\6\3\1\0\2\3\10\0\26\3\1\0\12\3"+
    "\1\146\1\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\14\3\16\0\1\147\7\3\1\0\2\3\10\0"+
    "\26\3\1\0\14\3\16\0\1\150\7\3\1\0\2\3"+
    "\10\0\22\3\1\151\3\3\1\0\14\3\16\0\10\3"+
    "\1\0\2\3\10\0\26\3\1\0\14\3\16\0\1\3"+
    "\1\152\6\3\1\0\1\153\1\3\10\0\1\153\1\3"+
    "\24\153\1\0\14\153\16\0\5\153\1\3\2\153\1\0"+
    "\1\3\1\113\1\0\1\154\6\0\1\3\1\113\24\3"+
    "\1\0\14\3\16\0\5\3\1\113\2\3\1\0\2\3"+
    "\1\0\1\155\6\0\26\3\1\0\14\3\16\0\10\3"+
    "\1\0\2\3\10\0\6\3\1\156\17\3\1\0\14\3"+
    "\16\0\10\3\1\0\2\3\10\0\14\3\1\157\11\3"+
    "\1\0\14\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\11\3\1\160\2\3\16\0\10\3\1\0\2\3"+
    "\10\0\26\3\1\0\13\3\1\161\16\0\10\3\1\0"+
    "\2\3\10\0\26\3\1\0\14\3\16\0\1\3\1\162"+
    "\6\3\67\0\1\163\15\0\2\3\10\0\24\3\1\164"+
    "\1\3\1\0\14\3\16\0\10\3\1\0\2\3\10\0"+
    "\26\3\1\0\13\3\1\165\16\0\10\3\1\0\2\3"+
    "\10\0\26\3\1\0\13\3\1\166\16\0\6\3\1\167"+
    "\1\3\1\0\2\3\10\0\26\3\1\0\14\3\16\0"+
    "\2\3\1\170\5\3\12\132\1\171\102\132\1\172\1\171"+
    "\71\132\1\0\2\3\10\0\6\3\1\173\17\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\4\3\1\174"+
    "\21\3\1\0\14\3\16\0\10\3\1\0\2\3\10\0"+
    "\12\3\1\175\13\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\26\3\1\0\4\3\1\176\7\3\16\0"+
    "\10\3\1\0\2\3\10\0\13\3\1\177\12\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\26\3\1\0"+
    "\1\200\13\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\3\3\1\201\10\3\16\0\10\3\1\0\2\3"+
    "\10\0\17\3\1\202\6\3\1\0\14\3\16\0\10\3"+
    "\1\0\2\3\10\0\26\3\1\0\12\3\1\203\1\3"+
    "\16\0\10\3\1\0\2\3\10\0\26\3\1\0\10\3"+
    "\1\204\3\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\12\3\1\205\1\3\16\0\10\3\1\0\2\3"+
    "\10\0\17\3\1\206\6\3\1\0\14\3\16\0\10\3"+
    "\1\0\2\3\10\0\17\3\1\207\6\3\1\0\14\3"+
    "\16\0\10\3\1\0\2\3\10\0\17\3\1\210\6\3"+
    "\1\0\14\3\16\0\10\3\1\0\1\153\1\3\10\0"+
    "\1\153\1\3\24\153\1\211\14\153\16\0\5\153\1\3"+
    "\2\153\2\0\1\154\11\0\1\154\64\0\1\154\3\0"+
    "\2\3\10\0\26\3\1\0\3\3\1\212\10\3\16\0"+
    "\10\3\1\0\2\3\10\0\26\3\1\0\1\213\13\3"+
    "\16\0\10\3\1\0\2\3\10\0\24\3\1\214\1\3"+
    "\1\0\14\3\16\0\10\3\1\0\2\3\10\0\17\3"+
    "\1\215\6\3\1\0\14\3\16\0\10\3\1\0\2\3"+
    "\10\0\24\3\1\216\1\3\1\0\14\3\16\0\10\3"+
    "\1\0\2\3\10\0\26\3\1\0\13\3\1\217\16\0"+
    "\10\3\1\0\2\3\10\0\21\3\1\220\4\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\26\3\1\0"+
    "\12\3\1\221\1\3\16\0\10\3\1\0\2\3\10\0"+
    "\26\3\1\0\12\3\1\222\1\3\16\0\10\3\1\0"+
    "\2\3\10\0\17\3\1\223\6\3\1\0\14\3\16\0"+
    "\10\3\11\132\1\11\1\171\71\132\1\0\2\3\10\0"+
    "\7\3\1\224\16\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\5\3\1\225\20\3\1\0\14\3\16\0"+
    "\10\3\1\0\2\3\10\0\4\3\1\226\21\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\4\3\1\227"+
    "\21\3\1\0\14\3\16\0\10\3\1\0\2\3\10\0"+
    "\10\3\1\230\15\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\7\3\1\231\16\3\1\0\14\3\16\0"+
    "\10\3\1\0\2\3\10\0\11\3\1\232\14\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\20\3\1\233"+
    "\5\3\1\0\14\3\16\0\10\3\1\0\2\3\10\0"+
    "\20\3\1\234\5\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\15\3\1\235\10\3\1\0\14\3\16\0"+
    "\10\3\1\0\2\3\10\0\26\3\1\0\13\3\1\236"+
    "\16\0\10\3\1\0\2\3\10\0\26\3\1\0\14\3"+
    "\16\0\1\3\1\237\6\3\1\0\2\3\10\0\26\3"+
    "\1\0\13\3\1\240\16\0\10\3\1\0\2\3\10\0"+
    "\20\3\1\241\5\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\5\3\1\242\20\3\1\0\14\3\16\0"+
    "\10\3\1\0\2\3\10\0\5\3\1\243\20\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\23\3\1\244"+
    "\2\3\1\0\14\3\16\0\10\3\1\0\2\3\10\0"+
    "\20\3\1\245\5\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\26\3\1\0\14\3\16\0\4\3\1\246"+
    "\3\3\1\0\2\3\10\0\23\3\1\247\2\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\26\3\1\0"+
    "\10\3\1\250\3\3\16\0\10\3\1\0\2\3\10\0"+
    "\20\3\1\251\5\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\26\3\1\0\14\3\16\0\5\3\1\252"+
    "\2\3\1\0\2\3\10\0\6\3\1\253\17\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\10\3\1\226"+
    "\15\3\1\0\14\3\16\0\10\3\1\0\2\3\10\0"+
    "\14\3\1\254\11\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\14\3\1\255\11\3\1\0\14\3\16\0"+
    "\10\3\1\0\2\3\10\0\26\3\1\0\3\3\1\256"+
    "\10\3\16\0\10\3\1\0\2\3\10\0\21\3\1\257"+
    "\4\3\1\0\14\3\16\0\10\3\1\0\2\3\10\0"+
    "\26\3\1\0\12\3\1\260\1\3\16\0\10\3\1\0"+
    "\2\3\10\0\22\3\1\261\3\3\1\0\14\3\16\0"+
    "\10\3\1\0\2\3\10\0\24\3\1\262\1\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\26\3\1\0"+
    "\12\3\1\263\1\3\16\0\10\3\1\0\2\3\10\0"+
    "\20\3\1\264\5\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\10\3\1\265\15\3\1\0\14\3\16\0"+
    "\10\3\1\0\2\3\10\0\21\3\1\266\4\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\26\3\1\0"+
    "\12\3\1\267\1\3\16\0\10\3\1\0\2\3\10\0"+
    "\26\3\1\0\12\3\1\270\1\3\16\0\10\3\1\0"+
    "\2\3\10\0\24\3\1\271\1\3\1\0\14\3\16\0"+
    "\10\3\1\0\2\3\10\0\2\3\1\272\23\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\4\3\1\273"+
    "\21\3\1\0\14\3\16\0\10\3\1\0\2\3\10\0"+
    "\13\3\1\274\12\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\26\3\1\0\1\175\13\3\16\0\10\3"+
    "\1\0\2\3\10\0\26\3\1\0\7\3\1\275\4\3"+
    "\16\0\10\3\1\0\2\3\10\0\2\3\1\276\23\3"+
    "\1\0\14\3\16\0\10\3\1\0\2\3\10\0\20\3"+
    "\1\277\5\3\1\0\14\3\16\0\10\3\1\0\2\3"+
    "\10\0\24\3\1\300\1\3\1\0\14\3\16\0\10\3"+
    "\1\0\2\3\10\0\20\3\1\301\5\3\1\0\14\3"+
    "\16\0\10\3\1\0\2\3\10\0\15\3\1\302\10\3"+
    "\1\0\14\3\16\0\10\3\1\0\2\3\10\0\12\3"+
    "\1\303\13\3\1\0\14\3\16\0\10\3\1\0\2\3"+
    "\10\0\20\3\1\304\5\3\1\0\14\3\16\0\10\3"+
    "\1\0\2\3\10\0\20\3\1\305\5\3\1\0\14\3"+
    "\16\0\10\3\1\0\2\3\10\0\26\3\1\0\14\3"+
    "\16\0\1\306\7\3\1\0\2\3\10\0\10\3\1\307"+
    "\15\3\1\0\14\3\16\0\10\3\1\0\2\3\10\0"+
    "\5\3\1\177\20\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\7\3\1\310\16\3\1\0\14\3\16\0"+
    "\10\3\1\0\2\3\10\0\7\3\1\311\16\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\22\3\1\312"+
    "\3\3\1\0\14\3\16\0\10\3\1\0\2\3\10\0"+
    "\20\3\1\313\5\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\26\3\1\0\2\3\1\314\11\3\16\0"+
    "\10\3\1\0\2\3\10\0\16\3\1\315\7\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\2\3\1\316"+
    "\23\3\1\0\14\3\16\0\10\3\1\0\2\3\10\0"+
    "\26\3\1\0\12\3\1\317\1\3\16\0\10\3\1\0"+
    "\2\3\10\0\20\3\1\320\5\3\1\0\14\3\16\0"+
    "\10\3\1\0\2\3\10\0\5\3\1\321\20\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\5\3\1\322"+
    "\20\3\1\0\14\3\16\0\10\3\1\0\2\3\10\0"+
    "\17\3\1\323\6\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\24\3\1\324\1\3\1\0\14\3\16\0"+
    "\10\3\1\0\2\3\10\0\26\3\1\0\14\3\16\0"+
    "\1\325\7\3\1\0\2\3\10\0\26\3\1\0\11\3"+
    "\1\326\2\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\10\3\1\327\3\3\16\0\10\3\1\0\2\3"+
    "\10\0\24\3\1\330\1\3\1\0\14\3\16\0\10\3"+
    "\1\0\2\3\10\0\23\3\1\331\2\3\1\0\14\3"+
    "\16\0\10\3\1\0\2\3\10\0\17\3\1\332\6\3"+
    "\1\0\14\3\16\0\10\3\1\0\2\3\10\0\24\3"+
    "\1\333\1\3\1\0\14\3\16\0\10\3\1\0\2\3"+
    "\10\0\20\3\1\334\5\3\1\0\14\3\16\0\10\3"+
    "\1\0\2\3\10\0\26\3\1\0\11\3\1\335\2\3"+
    "\16\0\10\3\1\0\2\3\10\0\24\3\1\336\1\3"+
    "\1\0\14\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\13\3\1\337\16\0\10\3\1\0\2\3\10\0"+
    "\20\3\1\340\5\3\1\0\14\3\16\0\10\3\1\0"+
    "\2\3\10\0\26\3\1\0\12\3\1\341\1\3\16\0"+
    "\10\3\1\0\2\3\10\0\17\3\1\342\6\3\1\0"+
    "\14\3\16\0\10\3\1\0\2\3\10\0\26\3\1\0"+
    "\14\3\16\0\1\3\1\343\6\3\1\0\2\3\10\0"+
    "\26\3\1\0\14\3\16\0\3\3\1\344\4\3\1\0"+
    "\2\3\10\0\26\3\1\0\13\3\1\345\16\0\10\3"+
    "\1\0\2\3\10\0\20\3\1\346\5\3\1\0\14\3"+
    "\16\0\10\3\1\0\2\3\10\0\26\3\1\0\12\3"+
    "\1\347\1\3\16\0\10\3\1\0\2\3\10\0\26\3"+
    "\1\0\14\3\16\0\2\3\1\350\5\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12580];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\1\1\1\11\1\1\1\11"+
    "\25\1\10\11\4\1\2\11\4\1\1\0\1\11\1\1"+
    "\1\0\1\1\1\11\21\1\1\11\7\1\1\0\3\11"+
    "\4\1\2\0\21\1\1\0\5\1\1\11\5\1\1\0"+
    "\17\1\1\11\137\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return token(yytext(), "PUNTO", yyline, yycolumn);
          }
        case 54: break;
        case 3: 
          { return token(yytext(), "N_ENTERO", yyline, yycolumn);
          }
        case 55: break;
        case 45: 
          { return token (yytext(), "ACTIVAR", yyline, yycolumn);
          }
        case 56: break;
        case 5: 
          { return token(yytext(), "COMA", yyline, yycolumn);
          }
        case 57: break;
        case 43: 
          { return token(yytext(), "REPETIR", yyline, yycolumn);
          }
        case 58: break;
        case 29: 
          { return token(yytext(), "MENOR_IGUAL_QUE", yyline, yycolumn);
          }
        case 59: break;
        case 21: 
          { return token(yytext(), "SUMA", yyline, yycolumn);
          }
        case 60: break;
        case 50: 
          { return token(yytext(), "N_DECIMAL", yyline, yycolumn);
          }
        case 61: break;
        case 34: 
          { return token(yytext(), "CADENA", yyline, yycolumn);
          }
        case 62: break;
        case 17: 
          { return token(yytext(), "RESTA", yyline, yycolumn);
          }
        case 63: break;
        case 51: 
          { return token(yytext(), "DETENER_REPETIR", yyline, yycolumn);
          }
        case 64: break;
        case 41: 
          { return token(yytext(), "LOGICO", yyline, yycolumn);
          }
        case 65: break;
        case 32: 
          { return token(yytext(), "ACCION_LUZ", yyline, yycolumn);
          }
        case 66: break;
        case 42: 
          { return token(yytext(), "EVALUAR", yyline, yycolumn);
          }
        case 67: break;
        case 38: 
          { return token(yytext(), "ACCION_MEDIR", yyline, yycolumn);
          }
        case 68: break;
        case 36: 
          { return token(yytext(), "BOOL", yyline, yycolumn);
          }
        case 69: break;
        case 31: 
          { return token(yytext(), "ESTRUCTURA_SI", yyline, yycolumn);
          }
        case 70: break;
        case 52: 
          { return token(yytext(), "GENERAR_GRAF", yyline, yycolumn);
          }
        case 71: break;
        case 25: 
          { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
          }
        case 72: break;
        case 44: 
          { return token(yytext(), "ACCION_CONTROL", yyline, yycolumn);
          }
        case 73: break;
        case 24: 
          { return token(yytext(), "ERROR_1", yyline, yycolumn);
          }
        case 74: break;
        case 49: 
          { return token(yytext(), "INICIO", yyline, yycolumn);
          }
        case 75: break;
        case 11: 
          { return token(yytext(), "LLAVE_A", yyline, yycolumn);
          }
        case 76: break;
        case 22: 
          { return token(yytext(), "ERROR_2", yyline, yycolumn);
          }
        case 77: break;
        case 35: 
          { return token(yytext(), "TIPO_DATO", yyline, yycolumn);
          }
        case 78: break;
        case 18: 
          { return token(yytext(), "MAYOR_QUE", yyline, yycolumn);
          }
        case 79: break;
        case 53: 
          { return token(yytext(), "FUNCION FIJAR_ORIGEN", yyline, yycolumn);
          }
        case 80: break;
        case 27: 
          { return token(yytext(), "TEMPERATURA", yyline, yycolumn);
          }
        case 81: break;
        case 47: 
          { return token(yytext(), "ACCION_DISPENSAR", yyline, yycolumn);
          }
        case 82: break;
        case 2: 
          { return token(yytext(), "ERROR_3", yyline, yycolumn);
          }
        case 83: break;
        case 12: 
          { return token(yytext(), "LLAVE_C", yyline, yycolumn);
          }
        case 84: break;
        case 28: 
          { return token(yytext(), "MAYOR_IGUAL_QUE", yyline, yycolumn);
          }
        case 85: break;
        case 6: 
          { /* Ignorar */
          }
        case 86: break;
        case 26: 
          { return token(yytext(), "IGUAL_QUE", yyline, yycolumn);
          }
        case 87: break;
        case 9: 
          { return token(yytext(), "PARENTESIS_A", yyline, yycolumn);
          }
        case 88: break;
        case 20: 
          { return token(yytext(), "OP_LOGICO", yyline, yycolumn);
          }
        case 89: break;
        case 40: 
          { return token(yytext(), "FASES", yyline, yycolumn);
          }
        case 90: break;
        case 23: 
          { return token(yytext(), "TEXTO", yyline, yycolumn);
          }
        case 91: break;
        case 48: 
          { return token(yytext(), "ACCION_NOTIFICAR", yyline, yycolumn);
          }
        case 92: break;
        case 15: 
          { return token(yytext(), "PUNTOyCOMA", yyline, yycolumn);
          }
        case 93: break;
        case 7: 
          { return token(yytext(), "DIVISION", yyline, yycolumn);
          }
        case 94: break;
        case 46: 
          { return token(yytext(), "EXPANDIR", yyline, yycolumn);
          }
        case 95: break;
        case 30: 
          { return token(yytext(), "DIFERENTE_DE", yyline, yycolumn);
          }
        case 96: break;
        case 19: 
          { return token(yytext(), "MENOR_QUE", yyline, yycolumn);
          }
        case 97: break;
        case 10: 
          { return token(yytext(), "PARENTESIS_C", yyline, yycolumn);
          }
        case 98: break;
        case 39: 
          { return token(yytext(), "FINAL", yyline, yycolumn);
          }
        case 99: break;
        case 1: 
          { return token(yytext(), "ERROR", yyline, yycolumn);
          }
        case 100: break;
        case 13: 
          { return token(yytext(), "CORCHETE_A", yyline, yycolumn);
          }
        case 101: break;
        case 33: 
          { return token(yytext(), "Op_Asig", yyline, yycolumn);
          }
        case 102: break;
        case 16: 
          { return token(yytext(), "DOBLE_PUNTO", yyline, yycolumn);
          }
        case 103: break;
        case 8: 
          { return token(yytext(), "MULTIPLICACION", yyline, yycolumn);
          }
        case 104: break;
        case 37: 
          { return token(yytext(), "FUNCION_MUTAR", yyline, yycolumn);
          }
        case 105: break;
        case 14: 
          { return token(yytext(), "CORCHETE_C", yyline, yycolumn);
          }
        case 106: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
