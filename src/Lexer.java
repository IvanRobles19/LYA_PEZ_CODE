// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex


import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\4\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\6\21\3\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\31\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\31\1\47\1\50"+
    "\1\51\1\52\1\53\3\31\1\54\1\55\1\0\1\56"+
    "\1\0\1\57\1\0\1\60\1\31\1\61\1\62\1\63"+
    "\1\64\1\65\1\31\1\66\1\67\1\31\1\70\1\71"+
    "\1\72\1\73\1\74\1\31\1\75\1\76\1\77\1\100"+
    "\1\101\1\31\1\102\2\31\1\103\1\6\1\104\7\0"+
    "\1\3\113\0\1\105\17\0\1\105\7\0\1\105\3\0"+
    "\1\105\3\0\1\105\1\0\1\105\6\0\1\105\u012d\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\14\1\15\1\16"+
    "\1\17\1\1\1\20\15\21\1\22\1\23\15\21\1\24"+
    "\1\25\1\26\1\0\1\27\2\0\1\2\1\0\2\30"+
    "\1\31\1\14\1\32\1\33\1\34\17\21\1\35\1\21"+
    "\2\36\2\21\1\37\12\21\1\40\2\21\1\41\1\42"+
    "\2\0\10\21\1\43\7\21\1\0\1\36\17\21\1\0"+
    "\1\2\2\21\1\44\3\21\1\45\6\21\1\46\22\21"+
    "\1\47\1\50\1\51\10\21\1\52\1\21\1\53\3\21"+
    "\1\54\7\21\1\55\3\21\1\45\5\21\1\56\2\21"+
    "\1\57\4\21\1\60\1\61\5\21\1\62\3\21\1\63"+
    "\5\21\1\64\1\65\4\21\1\66\6\21\1\67\2\21"+
    "\1\70\1\21\1\71\1\72\3\21\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\106\0\214\0\322\0\106\0\u0118\0\106"+
    "\0\106\0\106\0\106\0\106\0\u015e\0\106\0\u01a4\0\u01ea"+
    "\0\u0230\0\106\0\106\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e"+
    "\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be"+
    "\0\u0604\0\u064a\0\u0690\0\106\0\106\0\u06d6\0\u071c\0\u0762"+
    "\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992"+
    "\0\u09d8\0\u0a1e\0\106\0\106\0\106\0\u0118\0\106\0\u0a64"+
    "\0\u0aaa\0\u0af0\0\u0b36\0\106\0\u0b7c\0\u0bc2\0\u0b36\0\106"+
    "\0\106\0\106\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66"+
    "\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96"+
    "\0\u0fdc\0\u038e\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180"+
    "\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0"+
    "\0\u13f6\0\u143c\0\u038e\0\u1482\0\u14c8\0\u038e\0\106\0\u150e"+
    "\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e"+
    "\0\u1784\0\u038e\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928"+
    "\0\u196e\0\u19b4\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12"+
    "\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42"+
    "\0\u1d88\0\u1dce\0\u1e14\0\u150e\0\u1e5a\0\u1ea0\0\u038e\0\u1ee6"+
    "\0\u1f2c\0\u1f72\0\106\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0"+
    "\0\u2116\0\u038e\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba"+
    "\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea"+
    "\0\u2530\0\u2576\0\u25bc\0\u2602\0\u038e\0\u038e\0\u038e\0\u2648"+
    "\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u038e"+
    "\0\u2878\0\u038e\0\u28be\0\u2904\0\u294a\0\u038e\0\u2990\0\u29d6"+
    "\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u038e\0\u2b7a\0\u2bc0"+
    "\0\u2c06\0\u038e\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u038e"+
    "\0\u2daa\0\u2df0\0\u038e\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u038e"+
    "\0\u038e\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2"+
    "\0\u3138\0\u317e\0\u038e\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc"+
    "\0\u038e\0\u038e\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u038e\0\u343a"+
    "\0\u3480\0\u34c6\0\u350c\0\u3552\0\u3598\0\u038e\0\u35de\0\u3624"+
    "\0\u038e\0\u366a\0\u038e\0\u038e\0\u36b0\0\u36f6\0\u373c\0\u038e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\2\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\30\1\33\3\30\1\34\1\35\1\36"+
    "\1\37\1\30\1\40\1\41\1\30\1\42\1\30\1\43"+
    "\1\30\1\44\1\45\1\46\1\47\1\50\1\30\1\51"+
    "\1\52\1\53\1\54\1\30\1\55\1\56\1\57\1\30"+
    "\1\60\1\61\1\62\4\30\1\63\1\64\1\30\110\0"+
    "\1\3\131\0\1\65\60\0\2\66\1\0\1\66\2\0"+
    "\1\67\10\0\3\66\5\0\25\66\2\0\24\66\20\0"+
    "\1\70\102\0\1\71\4\0\1\72\104\0\1\73\1\0"+
    "\1\74\2\75\5\0\25\76\2\0\24\76\2\0\1\76"+
    "\16\0\1\77\1\0\3\21\5\0\25\76\2\0\24\76"+
    "\2\0\1\76\26\0\1\100\105\0\1\101\105\0\1\102"+
    "\77\0\3\30\5\0\13\30\1\103\1\104\7\30\1\105"+
    "\2\0\24\30\2\0\1\30\20\0\3\30\5\0\25\30"+
    "\2\0\24\30\2\0\1\30\20\0\3\30\5\0\7\30"+
    "\1\106\5\30\1\107\7\30\2\0\24\30\2\0\1\30"+
    "\20\0\3\30\5\0\7\30\1\110\15\30\2\0\24\30"+
    "\2\0\1\30\20\0\3\30\5\0\1\111\24\30\2\0"+
    "\24\30\2\0\1\30\20\0\3\30\5\0\25\30\2\0"+
    "\1\112\23\30\2\0\1\30\20\0\3\30\5\0\22\30"+
    "\1\113\2\30\2\0\24\30\2\0\1\30\20\0\3\30"+
    "\5\0\4\30\1\114\10\30\1\115\7\30\2\0\24\30"+
    "\2\0\1\30\20\0\3\30\5\0\7\30\1\116\5\30"+
    "\1\117\4\30\1\120\2\30\2\0\21\30\1\121\2\30"+
    "\2\0\1\30\20\0\3\30\5\0\6\30\1\122\16\30"+
    "\2\0\24\30\2\0\1\30\20\0\3\30\5\0\15\30"+
    "\1\123\7\30\2\0\24\30\2\0\1\30\20\0\1\124"+
    "\2\125\5\0\4\30\1\126\20\30\2\0\24\30\2\0"+
    "\1\30\20\0\3\30\5\0\4\30\1\127\20\30\2\0"+
    "\24\30\2\0\1\30\20\0\3\30\5\0\25\130\2\0"+
    "\24\130\2\0\1\130\20\0\3\30\5\0\25\30\2\0"+
    "\2\30\1\131\21\30\2\0\1\30\20\0\3\30\5\0"+
    "\25\30\2\0\1\30\1\132\22\30\2\0\1\30\20\0"+
    "\3\30\5\0\25\30\2\0\22\30\1\133\1\134\2\0"+
    "\1\30\20\0\3\30\5\0\25\30\2\0\1\30\1\135"+
    "\5\30\1\136\14\30\2\0\1\30\20\0\3\30\5\0"+
    "\25\30\2\0\4\30\1\137\17\30\2\0\1\30\20\0"+
    "\3\30\5\0\25\30\2\0\13\30\1\140\10\30\2\0"+
    "\1\30\20\0\3\30\5\0\25\30\2\0\14\30\1\141"+
    "\7\30\2\0\1\30\20\0\3\30\5\0\25\30\2\0"+
    "\21\30\1\142\2\30\2\0\1\30\20\0\3\30\5\0"+
    "\25\30\2\0\14\30\1\143\7\30\2\0\1\30\20\0"+
    "\3\30\5\0\25\30\2\0\16\30\1\144\5\30\2\0"+
    "\1\30\20\0\3\30\5\0\25\30\2\0\4\30\1\145"+
    "\17\30\2\0\1\30\20\0\3\30\5\0\25\30\2\0"+
    "\7\30\1\146\14\30\2\0\1\30\27\0\1\147\56\0"+
    "\12\150\1\151\73\150\2\72\1\3\1\72\1\4\101\72"+
    "\20\0\3\77\103\0\3\75\103\0\3\76\5\0\25\76"+
    "\2\0\24\76\2\0\1\76\20\0\3\30\5\0\1\152"+
    "\24\30\2\0\24\30\2\0\1\30\20\0\3\30\5\0"+
    "\1\153\24\30\2\0\24\30\2\0\1\30\20\0\3\30"+
    "\5\0\22\30\1\154\2\30\2\0\24\30\2\0\1\30"+
    "\20\0\3\30\5\0\1\155\24\30\2\0\24\30\2\0"+
    "\1\30\20\0\3\30\5\0\14\30\1\156\10\30\2\0"+
    "\24\30\2\0\1\30\20\0\3\30\5\0\20\30\1\157"+
    "\4\30\2\0\24\30\2\0\1\30\20\0\3\30\5\0"+
    "\12\30\1\160\12\30\2\0\24\30\2\0\1\30\20\0"+
    "\3\30\5\0\25\161\2\0\24\161\2\0\1\161\20\0"+
    "\3\30\5\0\24\30\1\162\2\0\24\30\2\0\1\30"+
    "\20\0\3\30\5\0\3\30\1\163\21\30\2\0\24\30"+
    "\2\0\1\30\20\0\3\30\5\0\17\30\1\164\5\30"+
    "\2\0\24\30\2\0\1\30\20\0\3\30\5\0\23\30"+
    "\1\165\1\30\2\0\24\30\2\0\1\30\20\0\3\30"+
    "\5\0\21\30\1\166\3\30\2\0\24\30\2\0\1\30"+
    "\20\0\3\30\5\0\13\30\1\167\11\30\2\0\24\30"+
    "\2\0\1\30\20\0\3\30\5\0\25\30\2\0\12\30"+
    "\1\170\11\30\2\0\1\30\20\0\3\30\5\0\10\30"+
    "\1\171\14\30\2\0\24\30\2\0\1\30\16\0\1\172"+
    "\1\0\3\30\5\0\25\30\2\0\24\30\2\0\1\30"+
    "\16\0\1\173\1\0\3\125\5\0\25\30\2\0\24\30"+
    "\2\0\1\30\20\0\3\30\5\0\13\30\1\174\11\30"+
    "\2\0\24\30\2\0\1\30\20\0\3\30\5\0\17\30"+
    "\1\175\5\30\2\0\24\30\2\0\1\30\20\0\3\130"+
    "\5\0\25\130\2\0\24\130\2\0\1\130\20\0\3\30"+
    "\5\0\25\30\2\0\20\30\1\176\3\30\2\0\1\30"+
    "\20\0\3\30\5\0\25\30\2\0\3\30\1\177\20\30"+
    "\2\0\1\30\20\0\3\30\5\0\25\30\2\0\1\30"+
    "\1\200\22\30\2\0\1\30\20\0\3\30\5\0\25\30"+
    "\2\0\15\30\1\201\6\30\2\0\1\30\20\0\3\30"+
    "\5\0\25\30\2\0\17\30\1\202\4\30\2\0\1\30"+
    "\20\0\3\30\5\0\25\30\2\0\10\30\1\203\2\30"+
    "\1\204\10\30\2\0\1\30\20\0\3\30\5\0\25\30"+
    "\2\0\13\30\1\205\10\30\2\0\1\30\20\0\3\30"+
    "\5\0\25\30\2\0\20\30\1\206\3\30\2\0\1\30"+
    "\20\0\3\30\5\0\25\30\2\0\6\30\1\207\15\30"+
    "\2\0\1\30\20\0\3\30\5\0\25\30\2\0\20\30"+
    "\1\210\3\30\2\0\1\30\20\0\3\30\5\0\25\30"+
    "\2\0\7\30\1\211\14\30\2\0\1\30\20\0\3\30"+
    "\5\0\25\30\2\0\15\30\1\212\6\30\2\0\1\30"+
    "\12\150\1\213\105\150\1\213\4\150\1\214\66\150\20\0"+
    "\3\30\5\0\17\30\1\215\5\30\2\0\24\30\2\0"+
    "\1\30\20\0\3\30\5\0\17\30\1\216\5\30\2\0"+
    "\24\30\2\0\1\30\20\0\3\30\5\0\12\30\1\217"+
    "\12\30\2\0\24\30\2\0\1\30\20\0\3\30\5\0"+
    "\14\30\1\217\10\30\2\0\24\30\2\0\1\30\20\0"+
    "\3\30\5\0\21\30\1\220\3\30\2\0\24\30\2\0"+
    "\1\30\20\0\3\30\5\0\16\30\1\221\6\30\2\0"+
    "\24\30\2\0\1\30\20\0\3\30\5\0\20\30\1\222"+
    "\4\30\2\0\24\30\2\0\1\30\20\0\3\30\3\0"+
    "\1\223\1\0\25\161\2\0\24\161\2\0\1\161\20\0"+
    "\3\30\5\0\7\30\1\224\15\30\2\0\24\30\2\0"+
    "\1\30\20\0\3\30\5\0\1\225\24\30\2\0\24\30"+
    "\2\0\1\30\20\0\3\30\5\0\4\30\1\226\20\30"+
    "\2\0\24\30\2\0\1\30\20\0\3\30\5\0\7\30"+
    "\1\227\15\30\2\0\24\30\2\0\1\30\20\0\3\30"+
    "\5\0\4\30\1\230\20\30\2\0\24\30\2\0\1\30"+
    "\20\0\3\30\5\0\25\30\2\0\4\30\1\231\17\30"+
    "\2\0\1\30\20\0\3\30\5\0\15\30\1\217\7\30"+
    "\2\0\24\30\2\0\1\30\20\0\3\173\103\0\3\30"+
    "\5\0\16\30\1\232\6\30\2\0\24\30\2\0\1\30"+
    "\20\0\3\30\5\0\3\30\1\233\21\30\2\0\24\30"+
    "\2\0\1\30\20\0\3\30\5\0\25\30\2\0\7\30"+
    "\1\234\14\30\2\0\1\30\20\0\3\30\5\0\25\30"+
    "\2\0\4\30\1\235\17\30\2\0\1\30\20\0\3\30"+
    "\5\0\25\30\2\0\11\30\1\236\12\30\2\0\1\30"+
    "\20\0\3\30\5\0\25\30\2\0\1\30\1\237\22\30"+
    "\2\0\1\30\20\0\3\30\5\0\25\30\2\0\4\30"+
    "\1\240\17\30\2\0\1\30\20\0\3\30\5\0\25\30"+
    "\2\0\1\30\1\241\22\30\2\0\1\30\20\0\3\30"+
    "\5\0\25\30\2\0\1\30\1\242\22\30\2\0\1\30"+
    "\20\0\3\30\5\0\25\30\2\0\4\30\1\243\17\30"+
    "\2\0\1\30\20\0\3\30\5\0\25\30\2\0\4\30"+
    "\1\244\17\30\2\0\1\30\20\0\3\30\5\0\25\30"+
    "\2\0\7\30\1\245\14\30\2\0\1\30\20\0\3\30"+
    "\5\0\25\30\2\0\1\30\1\246\22\30\2\0\1\30"+
    "\20\0\3\30\5\0\25\30\2\0\13\30\1\247\10\30"+
    "\2\0\1\30\20\0\3\30\5\0\25\30\2\0\4\30"+
    "\1\250\17\30\2\0\1\30\12\150\1\213\4\150\1\3"+
    "\66\150\20\0\3\30\5\0\7\30\1\251\15\30\2\0"+
    "\24\30\2\0\1\30\20\0\3\30\5\0\1\252\24\30"+
    "\2\0\24\30\2\0\1\30\20\0\3\30\5\0\17\30"+
    "\1\253\5\30\2\0\24\30\2\0\1\30\20\0\3\30"+
    "\5\0\4\30\1\254\20\30\2\0\24\30\2\0\1\30"+
    "\20\0\3\30\5\0\15\30\1\255\7\30\2\0\24\30"+
    "\2\0\1\30\20\0\3\30\5\0\17\30\1\256\5\30"+
    "\2\0\24\30\2\0\1\30\20\0\3\30\5\0\3\30"+
    "\1\171\21\30\2\0\24\30\2\0\1\30\20\0\3\30"+
    "\5\0\12\30\1\257\12\30\2\0\24\30\2\0\1\30"+
    "\20\0\3\30\5\0\5\30\1\260\17\30\2\0\24\30"+
    "\2\0\1\30\20\0\3\30\5\0\17\30\1\261\5\30"+
    "\2\0\24\30\2\0\1\30\20\0\3\30\5\0\25\30"+
    "\2\0\16\30\1\262\5\30\2\0\1\30\20\0\3\30"+
    "\5\0\1\263\3\30\1\217\20\30\2\0\24\30\2\0"+
    "\1\30\20\0\3\30\5\0\25\30\2\0\22\30\1\264"+
    "\1\30\2\0\1\30\20\0\3\30\5\0\25\30\2\0"+
    "\13\30\1\265\10\30\2\0\1\30\20\0\3\30\5\0"+
    "\25\30\2\0\21\30\1\266\2\30\2\0\1\30\20\0"+
    "\3\30\5\0\25\30\2\0\13\30\1\267\10\30\2\0"+
    "\1\30\20\0\1\30\1\270\1\30\5\0\25\30\2\0"+
    "\24\30\2\0\1\30\20\0\3\30\5\0\25\30\2\0"+
    "\16\30\1\271\5\30\2\0\1\30\20\0\3\30\5\0"+
    "\25\30\2\0\11\30\1\272\12\30\2\0\1\30\20\0"+
    "\3\30\5\0\25\30\2\0\16\30\1\273\5\30\2\0"+
    "\1\30\20\0\3\30\5\0\25\30\2\0\16\30\1\274"+
    "\5\30\2\0\1\30\20\0\3\30\5\0\25\30\2\0"+
    "\2\30\1\275\21\30\2\0\1\30\20\0\3\30\5\0"+
    "\25\30\2\0\16\30\1\276\5\30\2\0\1\30\20\0"+
    "\3\30\5\0\25\30\2\0\2\30\1\277\21\30\2\0"+
    "\1\30\20\0\3\30\5\0\25\30\2\0\20\30\1\300"+
    "\3\30\2\0\1\30\20\0\3\30\5\0\12\30\1\301"+
    "\12\30\2\0\24\30\2\0\1\30\20\0\3\30\5\0"+
    "\14\30\1\302\10\30\2\0\24\30\2\0\1\30\20\0"+
    "\3\30\5\0\15\30\1\303\7\30\2\0\24\30\2\0"+
    "\1\30\20\0\3\30\5\0\14\30\1\304\10\30\2\0"+
    "\24\30\2\0\1\30\20\0\3\30\5\0\7\30\1\305"+
    "\15\30\2\0\24\30\2\0\1\30\20\0\3\30\5\0"+
    "\15\30\1\306\7\30\2\0\24\30\2\0\1\30\20\0"+
    "\3\30\5\0\25\30\2\0\14\30\1\307\7\30\2\0"+
    "\1\30\20\0\3\30\5\0\3\30\1\310\21\30\2\0"+
    "\24\30\2\0\1\30\20\0\3\30\5\0\25\30\2\0"+
    "\1\30\1\311\22\30\2\0\1\30\20\0\3\30\5\0"+
    "\25\30\2\0\1\30\1\312\22\30\2\0\1\30\20\0"+
    "\3\30\5\0\25\30\2\0\1\30\1\313\22\30\2\0"+
    "\1\30\20\0\3\30\5\0\25\30\2\0\3\30\1\314"+
    "\20\30\2\0\1\30\20\0\3\30\5\0\25\30\2\0"+
    "\1\315\23\30\2\0\1\30\20\0\3\30\5\0\25\30"+
    "\2\0\1\30\1\316\22\30\2\0\1\30\20\0\3\30"+
    "\5\0\25\30\2\0\16\30\1\317\5\30\2\0\1\30"+
    "\20\0\3\30\5\0\25\30\2\0\14\30\1\320\7\30"+
    "\2\0\1\30\20\0\3\30\5\0\25\30\2\0\7\30"+
    "\1\321\14\30\2\0\1\30\20\0\3\30\5\0\25\30"+
    "\2\0\7\30\1\322\14\30\2\0\1\30\20\0\3\30"+
    "\5\0\12\30\1\171\12\30\2\0\24\30\2\0\1\30"+
    "\20\0\3\30\5\0\10\30\1\164\14\30\2\0\24\30"+
    "\2\0\1\30\20\0\3\30\5\0\12\30\1\323\12\30"+
    "\2\0\24\30\2\0\1\30\20\0\3\30\5\0\20\30"+
    "\1\324\4\30\2\0\24\30\2\0\1\30\20\0\3\30"+
    "\5\0\2\30\1\325\22\30\2\0\24\30\2\0\1\30"+
    "\20\0\3\30\5\0\25\30\2\0\1\326\23\30\2\0"+
    "\1\30\20\0\3\30\5\0\4\30\1\327\20\30\2\0"+
    "\24\30\2\0\1\30\20\0\3\30\5\0\25\30\2\0"+
    "\16\30\1\330\5\30\2\0\1\30\20\0\3\30\5\0"+
    "\25\30\2\0\16\30\1\331\5\30\2\0\1\30\20\0"+
    "\3\30\5\0\25\30\2\0\7\30\1\332\14\30\2\0"+
    "\1\30\20\0\3\30\5\0\15\30\1\333\7\30\2\0"+
    "\24\30\2\0\1\30\20\0\3\30\5\0\25\30\2\0"+
    "\16\30\1\334\5\30\2\0\1\30\20\0\3\30\5\0"+
    "\25\30\2\0\21\30\1\335\2\30\2\0\1\30\20\0"+
    "\3\30\5\0\25\30\2\0\15\30\1\336\6\30\2\0"+
    "\1\30\20\0\3\30\5\0\25\30\2\0\16\30\1\337"+
    "\5\30\2\0\1\30\20\0\3\30\5\0\1\340\24\30"+
    "\2\0\24\30\2\0\1\30\20\0\3\30\5\0\1\341"+
    "\24\30\2\0\24\30\2\0\1\30\20\0\3\30\5\0"+
    "\25\30\2\0\3\30\1\342\20\30\2\0\1\30\20\0"+
    "\3\30\5\0\17\30\1\222\5\30\2\0\24\30\2\0"+
    "\1\30\20\0\3\30\5\0\25\30\2\0\16\30\1\343"+
    "\5\30\2\0\1\30\20\0\3\30\5\0\25\30\2\0"+
    "\16\30\1\344\5\30\2\0\1\30\20\0\3\30\5\0"+
    "\25\30\2\0\1\345\23\30\2\0\1\30\20\0\3\30"+
    "\5\0\25\30\2\0\12\30\1\346\11\30\2\0\1\30"+
    "\20\0\3\30\5\0\25\30\2\0\1\30\1\347\22\30"+
    "\2\0\1\30\20\0\3\30\5\0\13\30\1\350\11\30"+
    "\2\0\24\30\2\0\1\30\20\0\3\30\5\0\17\30"+
    "\1\351\5\30\2\0\24\30\2\0\1\30\20\0\3\30"+
    "\5\0\17\30\1\352\5\30\2\0\24\30\2\0\1\30"+
    "\20\0\3\30\5\0\25\30\2\0\4\30\1\353\17\30"+
    "\2\0\1\30\20\0\3\30\5\0\25\30\2\0\7\30"+
    "\1\354\14\30\2\0\1\30\20\0\3\30\5\0\25\30"+
    "\2\0\6\30\1\355\15\30\2\0\1\30\20\0\3\30"+
    "\5\0\25\30\2\0\15\30\1\356\6\30\2\0\1\30"+
    "\20\0\3\30\5\0\25\30\2\0\11\30\1\357\12\30"+
    "\2\0\1\30\20\0\3\30\5\0\25\30\2\0\7\30"+
    "\1\360\14\30\2\0\1\30\20\0\3\30\5\0\25\30"+
    "\2\0\2\30\1\361\21\30\2\0\1\30\20\0\3\30"+
    "\5\0\25\30\2\0\6\30\1\362\15\30\2\0\1\30"+
    "\20\0\3\30\5\0\25\30\2\0\16\30\1\363\5\30"+
    "\2\0\1\30\20\0\3\30\5\0\25\30\2\0\7\30"+
    "\1\364\14\30\2\0\1\30\20\0\3\30\5\0\25\30"+
    "\2\0\4\30\1\365\17\30\2\0\1\30\20\0\3\30"+
    "\5\0\25\30\2\0\7\30\1\366\14\30\2\0\1\30"+
    "\20\0\3\30\5\0\25\30\2\0\4\30\1\367\17\30"+
    "\2\0\1\30\20\0\3\30\5\0\25\30\2\0\1\30"+
    "\1\370\22\30\2\0\1\30\20\0\3\30\5\0\25\30"+
    "\2\0\16\30\1\371\5\30\2\0\1\30\20\0\3\30"+
    "\5\0\25\30\2\0\13\30\1\372\10\30\2\0\1\30"+
    "\20\0\3\30\5\0\25\30\2\0\13\30\1\373\10\30"+
    "\2\0\1\30\20\0\3\30\5\0\25\30\2\0\5\30"+
    "\1\374\16\30\2\0\1\30\20\0\3\30\5\0\25\30"+
    "\2\0\20\30\1\375\3\30\2\0\1\30\20\0\3\30"+
    "\5\0\25\30\2\0\16\30\1\376\5\30\2\0\1\30"+
    "\20\0\3\30\5\0\25\30\2\0\1\30\1\377\22\30"+
    "\2\0\1\30\20\0\3\30\5\0\25\30\2\0\17\30"+
    "\1\u0100\4\30\2\0\1\30";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14210];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\1\1\5\11\1\1\1\11"+
    "\3\1\2\11\20\1\2\11\15\1\3\11\1\0\1\11"+
    "\2\0\1\1\1\0\1\11\3\1\3\11\44\1\1\11"+
    "\2\0\20\1\1\0\20\1\1\0\7\1\1\11\155\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 2:
            { /* Ignorar */
            }
            // fall through
          case 60: break;
          case 3:
            { return token(yytext(), "OP_LOGICO", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 4:
            { return token(yytext(), "PARENTESIS_A", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 5:
            { return token(yytext(), "PARENTESIS_C", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 6:
            { return token(yytext(), "MULTIPLICACION", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 7:
            { return token(yytext(), "SUMA", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 8:
            { return token(yytext(), "COMA", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 9:
            { return token(yytext(), "RESTA", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 10:
            { return token(yytext(), "PUNTO", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 11:
            { return token(yytext(), "DIVISION", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 12:
            { return token(yytext(), "N_ENTERO", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 13:
            { return token(yytext(), "DOBLE_PUNTO", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 14:
            { return token(yytext(), "PUNTOyCOMA", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 15:
            { return token(yytext(), "MENOR_QUE", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 16:
            { return token(yytext(), "MAYOR_QUE", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          case 17:
            { return token(yytext(), "ERROR_3", yyline, yycolumn);
            }
            // fall through
          case 75: break;
          case 18:
            { return token(yytext(), "CORCHETE_A", yyline, yycolumn);
            }
            // fall through
          case 76: break;
          case 19:
            { return token(yytext(), "CORCHETE_C", yyline, yycolumn);
            }
            // fall through
          case 77: break;
          case 20:
            { return token(yytext(), "LLAVE_A", yyline, yycolumn);
            }
            // fall through
          case 78: break;
          case 21:
            { return token(yytext(), "LLAVE_C", yyline, yycolumn);
            }
            // fall through
          case 79: break;
          case 22:
            { return token(yytext(), "DIFERENTE_DE", yyline, yycolumn);
            }
            // fall through
          case 80: break;
          case 23:
            { return token(yytext(), "TEXTO", yyline, yycolumn);
            }
            // fall through
          case 81: break;
          case 24:
            { return token(yytext(), "ERROR_1", yyline, yycolumn);
            }
            // fall through
          case 82: break;
          case 25:
            { return token(yytext(), "ERROR_2", yyline, yycolumn);
            }
            // fall through
          case 83: break;
          case 26:
            { return token(yytext(), "MENOR_IGUAL_QUE", yyline, yycolumn);
            }
            // fall through
          case 84: break;
          case 27:
            { return token(yytext(), "IGUAL_QUE", yyline, yycolumn);
            }
            // fall through
          case 85: break;
          case 28:
            { return token(yytext(), "MAYOR_IGUAL_QUE", yyline, yycolumn);
            }
            // fall through
          case 86: break;
          case 29:
            { return token(yytext(), "RESERVADA_PH", yyline, yycolumn);
            }
            // fall through
          case 87: break;
          case 30:
            { return token(yytext(), "TEMPERATURA", yyline, yycolumn);
            }
            // fall through
          case 88: break;
          case 31:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 89: break;
          case 32:
            { return token(yytext(), "ESTRUCTURA_SI_NO", yyline, yycolumn);
            }
            // fall through
          case 90: break;
          case 33:
            { return token(yytext(), "ESTRUCTURA_SI", yyline, yycolumn);
            }
            // fall through
          case 91: break;
          case 34:
            { return token(yytext(), "Op_Asig", yyline, yycolumn);
            }
            // fall through
          case 92: break;
          case 35:
            { return token(yytext(), "ACCION_LUZ", yyline, yycolumn);
            }
            // fall through
          case 93: break;
          case 36:
            { return token(yytext(), "COLORES", yyline, yycolumn);
            }
            // fall through
          case 94: break;
          case 37:
            { return token(yytext(), "CADENA", yyline, yycolumn);
            }
            // fall through
          case 95: break;
          case 38:
            { return token(yytext(), "RESERVADA_TEMP", yyline, yycolumn);
            }
            // fall through
          case 96: break;
          case 39:
            { return token(yytext(), "BOOL", yyline, yycolumn);
            }
            // fall through
          case 97: break;
          case 40:
            { return token(yytext(), "ACCION_MEDIR", yyline, yycolumn);
            }
            // fall through
          case 98: break;
          case 41:
            { return token(yytext(), "RESERVADA_NIVEL", yyline, yycolumn);
            }
            // fall through
          case 99: break;
          case 42:
            { return token(yytext(), "FASES", yyline, yycolumn);
            }
            // fall through
          case 100: break;
          case 43:
            { return token(yytext(), "FINAL", yyline, yycolumn);
            }
            // fall through
          case 101: break;
          case 44:
            { return token(yytext(), "FUNCION_MUTAR", yyline, yycolumn);
            }
            // fall through
          case 102: break;
          case 45:
            { return token(yytext(), "TIPO_DATO", yyline, yycolumn);
            }
            // fall through
          case 103: break;
          case 46:
            { return token(yytext(), "LOGICO", yyline, yycolumn);
            }
            // fall through
          case 104: break;
          case 47:
            { return token(yytext(), "ACCION_CONTROL", yyline, yycolumn);
            }
            // fall through
          case 105: break;
          case 48:
            { return token (yytext(), "ACTIVAR", yyline, yycolumn);
            }
            // fall through
          case 106: break;
          case 49:
            { return token(yytext(), "EVALUAR", yyline, yycolumn);
            }
            // fall through
          case 107: break;
          case 50:
            { return token(yytext(), "REPETIR", yyline, yycolumn);
            }
            // fall through
          case 108: break;
          case 51:
            { return token(yytext(), "EXPANDIR", yyline, yycolumn);
            }
            // fall through
          case 109: break;
          case 52:
            { return token(yytext(), "ACCION_DISPENSAR", yyline, yycolumn);
            }
            // fall through
          case 110: break;
          case 53:
            { return token(yytext(), "ACCION_NOTIFICAR", yyline, yycolumn);
            }
            // fall through
          case 111: break;
          case 54:
            { return token(yytext(), "INICIO", yyline, yycolumn);
            }
            // fall through
          case 112: break;
          case 55:
            { return token(yytext(), "N_DECIMAL", yyline, yycolumn);
            }
            // fall through
          case 113: break;
          case 56:
            { return token(yytext(), "DETENER_REPETIR", yyline, yycolumn);
            }
            // fall through
          case 114: break;
          case 57:
            { return token(yytext(), "FUNCION FIJAR_ORIGEN", yyline, yycolumn);
            }
            // fall through
          case 115: break;
          case 58:
            { return token(yytext(), "GENERAR_GRAF", yyline, yycolumn);
            }
            // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
