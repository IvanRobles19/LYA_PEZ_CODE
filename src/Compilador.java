
import com.formdev.flatlaf.FlatIntelliJLaf;
import compilerTools.Directory;
import compilerTools.ErrorLSSL;
import compilerTools.Functions;
import compilerTools.Grammar;
import compilerTools.Production;
import compilerTools.TextColor;
import compilerTools.Token;
import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;


/**
 *
 * @author IvanLH
 */
public class Compilador extends javax.swing.JFrame {
    private String production;
    private String title;
    private Directory Directorio;
    private ArrayList<Token> tokens;
    private ArrayList<ErrorLSSL> errors;
    private String errores=null;
    private ArrayList<TextColor> textsColor;
    private Timer timerKeyReleased;
    private ArrayList<Production> identProd;
    private ArrayList<idControl> identCotrol= new ArrayList();
    private HashMap<String, String> identificadores;
    private boolean codeHasBeenCompiled = false;
    private int tama√±ojsp =11;
    private int tamAnte=100;
    private String finzz ="";
    private ArrayList<tokenSintac> tksintac = new ArrayList();
    private int posicion=0;
    private boolean estado=true;
    private String estados;
    private boolean contSentencias;
    
       
    

    /**
     * Creates new form Compilador
     */
    public Compilador() {
        initComponents();
        init();
        this.setSize(1100, 550);
        this.setTitle("<PEZ>");
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnAbrir = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnCompilar = new javax.swing.JButton();
        btnEjecutar = new javax.swing.JButton();
        btnGuardarC = new javax.swing.JButton();
        txaErrores = new java.awt.TextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblLexemas = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtpEscritorio = new javax.swing.JTextPane();
        btnSimbolos = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jspZomm = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1200, 700));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 0, 255));
        jPanel1.setLayout(null);

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jPanel1.add(btnNuevo);
        btnNuevo.setBounds(10, 20, 110, 23);

        btnAbrir.setText("Abrir");
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });
        jPanel1.add(btnAbrir);
        btnAbrir.setBounds(120, 20, 100, 23);

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuardar);
        btnGuardar.setBounds(220, 20, 71, 23);

        btnCompilar.setText("Compilar");
        btnCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompilarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCompilar);
        btnCompilar.setBounds(470, 20, 120, 23);

        btnEjecutar.setText("Ejecutar");
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEjecutar);
        btnEjecutar.setBounds(590, 20, 120, 40);

        btnGuardarC.setText("Guardar Como");
        btnGuardarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuardarC);
        btnGuardarC.setBounds(340, 20, 130, 23);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(6, 5, 740, 70);
        getContentPane().add(txaErrores);
        txaErrores.setBounds(10, 530, 820, 110);

        tblLexemas.setBackground(new java.awt.Color(204, 204, 204));
        tblLexemas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Componente Lexico", "Lexema", "{Linea, Columna}"
            }
        ));
        jScrollPane3.setViewportView(tblLexemas);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(840, 90, 310, 410);

        jScrollPane2.setViewportView(jtpEscritorio);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 90, 820, 410);

        btnSimbolos.setBackground(new java.awt.Color(51, 102, 255));
        btnSimbolos.setText("Tabla de simbolos");
        btnSimbolos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimbolosActionPerformed(evt);
            }
        });
        getContentPane().add(btnSimbolos);
        btnSimbolos.setBounds(770, 10, 180, 60);

        jLabel1.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 13)); // NOI18N
        jLabel1.setText("PEZ CODE");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(960, 20, 110, 40);

        jspZomm.setModel(new javax.swing.SpinnerNumberModel(100, 0, 200, 10));
        jspZomm.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jspZommStateChanged(evt);
            }
        });
        getContentPane().add(jspZomm);
        jspZomm.setBounds(10, 500, 60, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        Directorio.New();
        clearFields();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        if (Directorio.Open()) {
            colorAnalisis();
            clearFields();
        }
    }//GEN-LAST:event_btnAbrirActionPerformed
//public void (){

//}

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        if (Directorio.Save()) {
            clearFields();
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompilarActionPerformed
        tksintac.clear();
        identCotrol.clear();
        posicion=0;
        estado=true;
        production=null;
        errores=null;
        if (getTitle().contains("*") || getTitle().equals(title)) {
            if (Directorio.Save()) {
                compile();
            }
        } else {
            compile();
        }

    }//GEN-LAST:event_btnCompilarActionPerformed

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed
        btnCompilar.doClick();
        
        if (codeHasBeenCompiled) {
            if (errors.size() > 0) {
                JOptionPane.showMessageDialog(null, "No se puede ejecutar el codigo ya que se encontro uno o mas errores");
            } else {

            }
        }
    }//GEN-LAST:event_btnEjecutarActionPerformed

    private void btnGuardarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCActionPerformed
        if (Directorio.SaveAs()) {
            clearFields();
        }
    }//GEN-LAST:event_btnGuardarCActionPerformed

    private void btnSimbolosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimbolosActionPerformed
        
        Tablass T = new Tablass(production);
        T.setVisible(true);

    }//GEN-LAST:event_btnSimbolosActionPerformed

    private void jspZommStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jspZommStateChanged
        //jtpEscritorio.setFont("Serif",Font.PLAIN,12);
        int val = (Integer)jspZomm.getValue();
        System.out.println("tamAnte = " + tamAnte);
         System.out.println("jspZomm.getComponentCount() = " + jspZomm.getComponentCount());
        if (tamAnte<val) {
            tama√±ojsp+=5;
            float f =tama√±ojsp;
        jtpEscritorio.setFont(jtpEscritorio.getFont().deriveFont(f));
        System.out.println("evt = se corre ");
        tamAnte=val;
        }else{
            tama√±ojsp-=5;
        System.out.println("tama√±ojsp = " + tama√±ojsp);
       // jtpEscritorio.getFont().deriveFont(tama√±ojsp);
       float f =tama√±ojsp;
        jtpEscritorio.setFont(jtpEscritorio.getFont().deriveFont(f));
        System.out.println("evt = se corre ");
        tamAnte=val;
        }
    }//GEN-LAST:event_jspZommStateChanged

    /**
     * @param args the command line arguments
     */
    private void init() {
        title = "PEZ";
        setLocationRelativeTo(null);
        setTitle(title);
        Directorio = new Directory(this, jtpEscritorio, title, ".pez");
        addWindowListener(new WindowAdapter() {
            public void windwClosing(WindowEvent e) {
                Directorio.Exit();
                System.exit(0);
            }
        });
        Functions.setLineNumberOnJTextComponent(jtpEscritorio);
        timerKeyReleased = new Timer(300, ((e) -> {
            timerKeyReleased.stop();
            colorAnalisis();
        }));
        Functions.insertAsteriskInName(this, jtpEscritorio, () -> {
            timerKeyReleased.restart();
        });
        tokens = new ArrayList<>();
        errors = new ArrayList<>();
        textsColor = new ArrayList<>();
        identProd = new ArrayList<>();
        identificadores = new HashMap<>();
        Functions.setAutocompleterJTextComponent(new String[]{"hola", "numero", "este"}, jtpEscritorio, () -> {
            timerKeyReleased.restart();
        });

    }

    private void colorAnalisis() {
        LexerColor lexer;
        textsColor.clear();

        try {
            File codigo = new File("color.encrypter");
            FileOutputStream output = new FileOutputStream(codigo);
            byte[] bytesText = jtpEscritorio.getText().getBytes();
            output.write(bytesText);
            BufferedReader entrada = new BufferedReader(new InputStreamReader(new FileInputStream(codigo), "UTF-8"));
            lexer = new LexerColor(entrada);
            while (true) {
                TextColor textColor = lexer.yylex();
                if (textColor == null) {
                    break;
                }
                textsColor.add(textColor);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Compilador.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Compilador.class.getName()).log(Level.SEVERE, null, ex);
        }
        Functions.colorTextPane(textsColor, jtpEscritorio, new Color(40, 40, 40));
    }

    private void clearFields() {
        Functions.clearDataInTable(tblLexemas);
        txaErrores.setText("");
        tokens.clear();
        errors.clear();
        identProd.clear();
        identificadores.clear();
        codeHasBeenCompiled = false;
    }

    private void compile() {
        clearFields();
        LexicalAnalisis();
        fillTableTokens();
        SintacticAnalisis();
        //SemanticAnalisis();
        ImprimirConsola();
        codeHasBeenCompiled = true;
    }

    private void LexicalAnalisis() {
        Lexer lexer;

        try {
            File codigo = new File("code.encrypter");
            FileOutputStream output = new FileOutputStream(codigo);
            byte[] bytesText = jtpEscritorio.getText().getBytes();
            output.write(bytesText);
            BufferedReader entrada = new BufferedReader(new InputStreamReader(new FileInputStream(codigo), "UTF-8"));
            lexer = new Lexer(entrada);
            while (true) {
                Token token = lexer.yylex();
                if (token == null) {
                    break;
                }
                tokens.add(token);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Compilador.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Compilador.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void fillTableTokens() {
        tokens.forEach(token -> {
            tokenSintac tks=new  tokenSintac(token.getLexicalComp(),token.getLexeme(),token.getLine(),token.getColumn());
            tksintac.add(tks);
            Object[] data = new Object[]{token.getLexicalComp(), token.getLexeme(),
                "[" + token.getLine() + ", " + token.getColumn() + "]"};
            Functions.addRowDataInTable(tblLexemas, data);
        });
    }

    private void SintacticAnalisis() {

       System.out.println("tama√±o "+tksintac.size());
       production="";
       while(estado==true && posicion<tksintac.size()){//&& posicion<tksintac.size()
           
        System.out.println("posicion = " + posicion);
        System.out.println("entro ANALISIS");
        tokenSintac tok=(tokenSintac) tksintac.get(posicion);
        String toke =tok.getLexicoComp();
        switch(toke){
            case "TIPO_DATO":
                estado=autDECLARACION();
                System.out.println("pasa esto");
                
                break;
             case "CADENA":
                estado=autDECLARACIOCAD();
                System.out.println("pasa esto");
                
                break;
            case "ESTRUCTURA_SI":
                
                estado=autSI();
                
                break;
            case "ACCION_NOTIFICAR":
                estado=autNOTIFICACION();
                break;
                
            case "ACCION_CONTROL":
                estado=autDISPOSITIVOS();
                break;
                
            case "ACCION_MEDIR":
                estado=autMEDICIONES();
                break;
            case "REPETIR":
                estado=autREPETIR();
                break;
            case "IDENTIFICADOR":
                estado=autOPERACIONES();
                break;
            default:
                errores="error sintactico: No se esperaba ( "+tok.getLexema()
            +" ) en la linea y columa ["+tok.getLinea()+","+tok.getColumna()+"]";
           estado=false;
                posicion=tksintac.size();
                estado=false;
                break;
            }
        
        System.out.println("posicion = " + posicion);
           System.out.println("tama√±o array "+tksintac.size());
           System.out.println("estado = " + estado);
       
        }//wuile
    }
    
    //////////////////automata MEDICION DE SENSORES
    public boolean autMEDICIONES(){
        production+="MEDICION DE DATOS EN SENSORES\n";
     
        int q=0;
        while(q<4){
            tokenSintac tok=(tokenSintac) tksintac.get(posicion);
            switch(q){
            case 0:
            if("ACCION_MEDIR".equals(tok.getLexicoComp()) ){
            production+="q0 --> q1 con ACCION_MEDIR\n";
            posicion++;}else{
            production+="q0 --> X\n";
            qError("ACCION_MEDIR");return false;}//else q0
            break;
            case 1:
            if("IDENTIFICADOR".equals(tok.getLexicoComp()) ){
            production+="q1 --> q2 con IDENTIFICADOR\n";
            posicion++;}else {
            production+="q1 --> X\n";
            qError("IDENTIFICADOR");return false;}//else q1
            break;
            case 2:
            if("IDENTIFICADOR".equals(tok.getLexicoComp()) ){
            production+="q2 --> q3 con IDENTIFICADOR\n";
            posicion++;}else {
            production+="q2 --> X\n";
            qError("IDENTIFICADOR");return false;}//else q1
            break;
            
            case 3:
            if("PUNTOyCOMA".equals(tok.getLexicoComp()) ){
            production+="q3 --> q4 con PUNTOyCOMA\n";
            posicion++;}else{
            production+="q3 --> X\n";
            
            qError("PUNTOyCOMA");return false;}//else q2
            break;
          
            default:
                break;
            }    
            q++;
        }//while
        
        return true;
    }
    
    //////////////////automata declaracion de dispositivos
    public boolean autDISPOSITIVOS(){
        production+="DECLARACION DISPOSITIVOS \n";
     
        int q=0;
        System.out.println("entra automata DISPOSITIVOS");
        while(q<3){
            tokenSintac tok=(tokenSintac) tksintac.get(posicion);
            switch(q){
            case 0:
            if("ACCION_CONTROL".equals(tok.getLexicoComp()) ){
            production+="q0 --> q1 con ACCION_CONTROL\n";
            posicion++;}else{
            production+="q0 --> X\n";
            qError("ACCION_CONTROL");return false;}//else q0
            break;
            case 1:
                
           if("IDENTIFICADOR".equals(tok.getLexicoComp()) && q==1){
                if(checkId(tok.getLexema())==1){
                qErrorSem("El identificador ya se encuentra declarado (disp)");
            }
            identCotrol.add(new idControl(tok.getLexema(),tok.getLexicoComp()));
            production+="q1 --> q2 con IDENTIFICADOR\n";
            posicion++;}else {
            production+="q1 --> X\n";
            qError("IDENTIFICADOR");return false;}//else q1
            break;
            case 2:
            if("PUNTOyCOMA".equals(tok.getLexicoComp()) ){
            production+="q2 --> q3 con PUNTOyCOMA\n";
            posicion++;}else{
             production+="q2 --> X\n";
            qError("PUNTOyCOMA");return false;}//else q2
            break;
          
            default:
                break;
            }    
            q++;
        }//while
        
        return true;
    }
    
    //////////////////automata notificacion
    public boolean autNOTIFICACION(){
        production+="NOTIFICACION \n";
        int q=0;
        System.out.println("entra automata NOTIFICACION");
        while(q<3){
            tokenSintac tok=(tokenSintac) tksintac.get(posicion);
            switch(q){
            case 0:
            if("ACCION_NOTIFICAR".equals(tok.getLexicoComp()) ){
            production+="q0 --> q1 con ACCION_NOTIFICAR\n";
            posicion++;}else{
            production+="q0 --> X\n";
            qError("ACCION_NOTIFICAR");return false;}//else q0
            break;
            case 1:
            if("TEXTO".equals(tok.getLexicoComp()) ){
            production+="q1 --> q2 con TEXTO\n";
            posicion++;}else {
            production+="q1 --> X\n";
            qError("TEXTO");return false;}//else q1
            break;
            case 2:
            if("PUNTOyCOMA".equals(tok.getLexicoComp()) ){
            production+="q2 --> q3 con PUNTOyCOMA\n";
            posicion++;}else{
             production+="q2 --> X\n";
            qError("PUNTOyCOMA");return false;}//else q2
            break;
          
            default:
                break;
            }    
            q++;
        }//while
        
        return true;
    }

    
    //////////////////automata OPERACIONES
    public boolean autOPERACIONES(){
        int parentesisA=0;
        int parentesisC=0;
        String lineaA="",lineaC="";
        tokenSintac tok2;
        production+="OPERACIONES ARITMETICAS \n";
        int q=0;
        
        while(q<7){
            tokenSintac tok=(tokenSintac) tksintac.get(posicion);
            switch(q){
            case 0:
            if("IDENTIFICADOR".equals(tok.getLexicoComp()) && q==0){
                if(checkId(tok.getLexema())==0){
                qErrorSem("El identificador no se encuentra declarado");
                }
            production+="q0 --> q1 con IDENTIFICADOR\n";
            posicion++;}else{
            production+="q0 --> X\n";
            qError("IDENTIFICADOR");return false;}//else q0
            break;
            case 1:
            if("Op_Asig".equals(tok.getLexicoComp()) && q==1){
            production+="q1 --> q2 con Op_Asig (-->) \n";
            posicion++;}else {
            production+="q1 --> X\n";
            qError("Op_Asig");return false;}//else q1
            break;
            
            case 2:
            if("N_ENTERO".equals(tok.getLexicoComp())){
            production+="q2 --> q3 con NUMERO\n";
            posicion++;}else{
                if("IDENTIFICADOR".equals(tok.getLexicoComp()) ){
                    if(checkId(tok.getLexema())==0){
                    qErrorSem("El identificador no se encuentra declarado");
                    }    
                production+="q2 --> q3 con IDENTIFICADOR\n";
                posicion++;}    
                    else{    
                    if("PARENTESIS_A".equals(tok.getLexicoComp())){
                     production+="q2 --> q4 con PARENTESIS_A\n";
                     parentesisA++;
                     lineaA="linea "+tok.getLinea() +"y Columna "+tok.getColumna();
                     q=3;
                    posicion++;
                    }else{
                    production+="q2 --> X\n";
                    qError("NUMERO , IDENTIFICADOR o PARENTESIS_A");return false;
                    }//else parentesis
                }//else id
            }//else numero
            break;
            
            case 3:
            if("SUMA".equals(tok.getLexicoComp()) ||"RESTA".equals(tok.getLexicoComp()) ||"DIVISION".equals(tok.getLexicoComp()) ||"MULTIPLICACION".equals(tok.getLexicoComp()) ){
            production+="q3 --> q5 con OPERADOR_ARITMETICO\n";
            posicion++;
            q=4;}else{
                if("PARENTESIS_C".equals(tok.getLexicoComp())){
                    production+="q3 --> q6 con PARENTESIS_C\n";
                    posicion++;
                    parentesisC++;
                    lineaC="linea "+tok.getLinea() +"y Columna "+tok.getColumna();;
                    q=5;
                    }else{
                        if("PUNTOyCOMA".equals(tok.getLexicoComp())){
                        production+="q3 --> q7 con PUNTOyCOMA\n";
                        posicion++;
                        q=6;
                        }else{
                            production+="q3 --> X\n";
                            qError("OPERADOR_ARITMETICO o PARENTESIS_C");return false;
                            }
                        }
                    }//else q3
            break;
            
            case 4:
            if("N_ENTERO".equals(tok.getLexicoComp())){
            production+="q4 --> q3 con NUMERO\n";
            posicion++; q=2;}else{
                if("IDENTIFICADOR".equals(tok.getLexicoComp()) ){
                    if(checkId(tok.getLexema())==0){
                qErrorSem("El identificador no se encuentra declarado");
                }
                production+="q4 --> q3 con IDENTIFICADOR\n";
                posicion++;q=2;}    
                    else{    
                    if("PARENTESIS_A".equals(tok.getLexicoComp())){
                     production+="q4 --> q4 con PARENTESIS_A\n";
                     parentesisA++;
                     lineaA="linea "+tok.getLinea() +"y Columna "+tok.getColumna();;
                     q=3;
                    posicion++;
                    }else{
                    production+="q4 --> X\n";
                    qError("NUMERO , IDENTIFICADOR o PARENTESIS_A");return false;
                    }//else parentesis
                }//else id
            }//else numero
            
            break;
            
            case 5:
                if("N_ENTERO".equals(tok.getLexicoComp())){
                production+="q5 --> q3 con NUMERO\n";
                posicion++;q=2;}else{
                    if("IDENTIFICADOR".equals(tok.getLexicoComp()) ){
                        if(checkId(tok.getLexema())==0){
                qErrorSem("El identificador no se encuentra declarado");
                }
                   production+="q5 --> q3 con IDENTIFICADOR\n";
                   posicion++;
                    q=2;}    
                       else{    
                       if("PARENTESIS_A".equals(tok.getLexicoComp())){
                        production+="q5 --> q4 con PARENTESIS_A\n";
                        parentesisA++;
                        lineaA="linea "+tok.getLinea() +"y Columna "+tok.getColumna();;
                        q=3;
                       posicion++;
                       }else{
                       production+="q5 --> X\n";
                       qError("NUMERO , IDENTIFICADOR o PARENTESIS_A");return false;
                       }//else parentesis
                   }//else id
               }//else numero
            break;
            
            case 6:
                if("SUMA".equals(tok.getLexicoComp()) ||"RESTA".equals(tok.getLexicoComp()) ||"DIVISION".equals(tok.getLexicoComp()) ||"MULTIPLICACION".equals(tok.getLexicoComp())){
                production+="q6 --> q5 con OPERADOR ARITMETICO\n";
                posicion++; q=4;}else{
                    if("PUNTOyCOMA".equals(tok.getLexicoComp()) ){
                    production+="q6 --> q7 con PUNTOyCOMA\n";
                    posicion++;}    
                    else{    
                        if("PARENTESIS_C".equals(tok.getLexicoComp())){
                         production+="q6 --> q6 con PARENTESIS_C\n";
                         q=5;
                         lineaC="linea "+tok.getLinea() +"y Columna "+tok.getColumna();;
                         parentesisC++;
                        posicion++;
                            }else{
                            production+="q6 --> X\n";
                            qError("OPERADOR ARITMETICO , PUNTOyCOMA o PARENTESIS_C");return false;
                            }//else parentesis
                    }//else id
                }//else numero
                
                break;
            default:
                break;
            }    
            q++;
        }//while
        if(parentesisA>parentesisC){ errores="error sintactico: FALTA CIERRE DE PARENTESIS en la OPERACION ARITMETICA EN LA LINEA "+lineaA;
        return false;}
        if(parentesisC>parentesisA){ errores="error sintactico: FALTA APERTURA DE PARENTESIS en la OPERACION ARITMETICA EN LA LINEA "+lineaC;
        return false;}
        
        return true;
    }
    
    
    
    //////////////////automata declaracion de variable
    public boolean autDECLARACION(){
        production+="DECLARACION DE VARIABLE \n";
        System.out.println("posicion DV"+posicion);
        int q=0;
        System.out.println("entra automata declaracion");
        while(q<7){
            tokenSintac tok=(tokenSintac) tksintac.get(posicion);
            switch(q){
            case 0:
            if("TIPO_DATO".equals(tok.getLexicoComp()) && q==0){
            production+="q0 --> q1 con TIPO_DATO\n";
            posicion++;}else{
            production+="q0 --> X\n";
            qError("TIPO_DATO");return false;}//else q0
            break;
            case 1:
            if("IDENTIFICADOR".equals(tok.getLexicoComp()) && q==1){
            if(checkId(tok.getLexema())==1){
                qErrorSem("El identificador ya se encuentra declarado");
            }
            identCotrol.add(new idControl(tok.getLexema(),tok.getLexicoComp()));
            production+="q1 --> q2 con IDENTIFICADOR\n";
            posicion++;}else {
            production+="q1 --> X\n";
            qError("IDENTIFICADOR");return false;}//else q1
            break;
            case 2:
            if("Op_Asig".equals(tok.getLexicoComp()) && q==2){
            production+="q2 --> q3 con Op_Asig (-->)\n";
            posicion++;}else{
                if("COMA".equals(tok.getLexicoComp()) && q==2 ){
                   production+="q2 --> q5 con COMA (-->)\n"; 
                   posicion++;
                   q=4;   ////movi
                }else{
                    if("PUNTOyCOMA".equals(tok.getLexicoComp()) && q==2 ){
                    production+="q2 --> q7 con COMA (-->)\n"; 
                    posicion++;
                    q=6;   ////movi
                 }else{
                    production+="q2 --> X\n";
                 qError("Op_Asig o COMA o PUNTOyCOMA");return false; 
                 }
                }
            }//else q2
            break;
            case 3:
            if("N_ENTERO".equals(tok.getLexicoComp()) && q==3){
            production+="q3 --> q4 con N_ENTERO\n";
            posicion++; }else{
            production+="q3 --> X\n";
            qError("N_ENTERO");return false;}//else q3
            break;
            case 4:
            if("PUNTOyCOMA".equals(tok.getLexicoComp()) && q==4){
            production+="q4 --> q5 con PUNTOyCOMA\n";
            q=6;
            posicion++;
            estado=true;}else{
            production+="q3 --> X\n";
            qError("PUNTOyCOMA");return false;}//else q4
            break;
            case 5:
            if("IDENTIFICADOR".equals(tok.getLexicoComp()) && q==5){
            if(checkId(tok.getLexema())==1){
                qErrorSem("El identificador ya se encuentra declarado");
            }
            identCotrol.add(new idControl(tok.getLexema(),tok.getLexicoComp()));
            production+="q5 --> q6 con IDENTIFICADOR (-->)\n";
            posicion++;}else{
             production+="q5 --> X\n";
            qError("IDENTIFICADOR");return false;}//else q2
            break;
            case 6:
            if("COMA".equals(tok.getLexicoComp()) && q==6){
            production+="q6 --> q5 con COMA (-->)\n";
            posicion++;
            q=4;}else{
                if("PUNTOyCOMA".equals(tok.getLexicoComp()) && q==6 ){
                   production+="q6 --> q7 con PUNTOyCOMA (-->)\n"; 
                   posicion++;   ////movi
                }else{
                   production+="q6 --> X\n";
                qError("PUNTOyCOMA o COMA");return false; 
                }
            }//else q2
            break;
            
            default:
                break;
            }    
            q++;
        }//while
        
        return true;
    }
    
     //////////////////automata declaracion de variable
    public boolean autDECLARACIOCAD(){
        production+="DECLARACION DE CADENA \n";
        System.out.println("posicion DV"+posicion);
        int q=0;
        System.out.println("entra automata declaracion");
        while(q<7){
            tokenSintac tok=(tokenSintac) tksintac.get(posicion);
            switch(q){
            case 0:
            if("CADENA".equals(tok.getLexicoComp()) && q==0){
            production+="q0 --> q1 con TIPO_DATO\n";
            posicion++;}else{
            production+="q0 --> X\n";
            qError("CADENA");return false;}//else q0
            break;
            case 1:
            if("IDENTIFICADOR".equals(tok.getLexicoComp()) && q==1){
                if(checkId(tok.getLexema())==1){
                qErrorSem("El identificador ya se encuentra declarado 2222");
            }
            identCotrol.add(new idControl(tok.getLexema(),tok.getLexicoComp()));
            production+="q1 --> q2 con IDENTIFICADOR\n";
            posicion++;}else {
            production+="q1 --> X\n";
            qError("IDENTIFICADOR");return false;}//else q1
            break;
            case 2:
            if("Op_Asig".equals(tok.getLexicoComp()) && q==2){
            production+="q2 --> q3 con Op_Asig (-->)\n";
            posicion++;}else{
                if("COMA".equals(tok.getLexicoComp()) && q==2 ){
                   production+="q2 --> q5 con COMA (-->)\n"; 
                   posicion++;
                   q=4;   ////movi
                }else{
                    if("PUNTOyCOMA".equals(tok.getLexicoComp()) && q==2 ){
                    production+="q2 --> q7 con COMA (-->)\n"; 
                    posicion++;
                    q=6;   ////movi
                 }else{
                    production+="q2 --> X\n";
                 qError("Op_Asig o COMA o PUNTOyCOMA");return false; 
                 }
                }
            }//else q2
            break;
            case 3:
            if("TEXTO".equals(tok.getLexicoComp()) && q==3){
            production+="q3 --> q4 con TEXTO\n";
            posicion++; }else{
            production+="q3 --> X\n";
            qError("TEXTO");return false;}//else q3
            break;
            case 4:
            if("PUNTOyCOMA".equals(tok.getLexicoComp()) && q==4){
            production+="q4 --> q5 con PUNTOyCOMA\n";
            q=6;
            posicion++;
            estado=true;}else{
            production+="q3 --> X\n";
            qError("PUNTOyCOMA");return false;}//else q4
            break;
            case 5:
            if("IDENTIFICADOR".equals(tok.getLexicoComp()) && q==5){
                if(checkId(tok.getLexema())==1){
                qErrorSem("El identificador ya se encuentra declarado");
            }
            identCotrol.add(new idControl(tok.getLexema(),tok.getLexicoComp()));
            production+="q5 --> q6 con IDENTIFICADOR (-->)\n";
            posicion++;}else{
             production+="q5 --> X\n";
            qError("IDENTIFICADOR");return false;}//else q2
            break;
            case 6:
            if("COMA".equals(tok.getLexicoComp()) && q==6){
            production+="q6 --> q5 con COMA (-->)\n";
            posicion++;
            q=4;}else{
                if("PUNTOyCOMA".equals(tok.getLexicoComp()) && q==6 ){
                   production+="q6 --> q7 con PUNTOyCOMA (-->)\n"; 
                   posicion++;   ////movi
                }else{
                   production+="q6 --> X\n";
                qError("PUNTOyCOMA o COMA");return false; 
                }
            }//else q2
            break;
            
            default:
                break;
            }    
            q++;
        }//while
        
        return true;
    }
    
    //////////////////automata estructura si
     public boolean autSI(){
         production+="SENTENCIA SI \n";
         boolean sen,con;
         System.out.println("posicion si"+posicion);
        int q=0;
        System.out.println("entra automata SI");
        while(q<11){
            tokenSintac tok=(tokenSintac) tksintac.get(posicion);
            switch(q){
            case 0:
            if("ESTRUCTURA_SI".equals(tok.getLexicoComp())){
            production+="q0 --> q1 con ESTRUCTURA_SI\n";
            posicion++; }else{
            production+="q0 --> X\n";
             qError("ESTRUCTURA_SI");return false;}//else q0
            break;
            case 1:
            if("PARENTESIS_A".equals(tok.getLexicoComp())){
            production+="q1 --> q2 con PARENTESIS_A\n";
            posicion++; }else{
            production+="q1 --> X\n";
             qError("PARENTESIS_A");return false;}//else q0
            break;
            case 2:
                production+="q2 --> q3 con CONDICION \n";
               con=autCONDICIONAL();
               production+="CONTINUACION SENTENCIA SI \n";
                if(con==true){}
                if(con==false){/*qError("Estructura condicional erronea");*/return false;}
                break;
            case 3:
            if("PARENTESIS_C".equals(tok.getLexicoComp())){
            production+="q3 --> q4 con PARENTESIS_C\n";
            posicion++; }else{
            production+="q3 --> X\n";
             qError("PARENTESIS_C");return false;}//else q0
            break;
            
            case 4:
             if("LLAVE_A".equals(tok.getLexicoComp())){
            production+="q4 --> q5 con LLAVE_A ( { )\n";
            posicion++;}else {
            production+="q4 --> X\n";
             qError("LLAVE_A ({)"); return false;}//else q1
            break;
            case 5:
                production+="q5 --> q6 con SENTENCIA \n";
                sen=controlSENTENCIA();
                //sen=autDECLARACION();
                production+="CONTINUACION SENTENCIA SI \n";
                if(sen==true){}
                if(sen==false){/*qError("Sentencia erroneea dentro del si");*/return false;}
           
            break;
            case 6:
            if("LLAVE_C".equals(tok.getLexicoComp())){
            production+="q6 --> q7 con LLAVE_C (})\n";
            posicion++;
            estado=true;
            tokenSintac tok2=(tokenSintac) tksintac.get(posicion);
            if("ESTRUCTURA_SI_NO".equals(tok2.getLexicoComp())){}else{return true;}
            }else{
            production+="q6 --> X\n";
            qError("LLAVE_C (})");return false;}//else q3
            break;
            
            case 7:
             if("ESTRUCTURA_SI_NO".equals(tok.getLexicoComp())){
            production+="q7 --> q8 con ESTRUCTURA_SI_NO ( { )\n";
            posicion++;}else {
            production+="q7 --> X\n";
             qError("ESTRUCTURA_SI_NO ({)"); return false;}//else q1
            break;
            
            case 8:
             if("LLAVE_A".equals(tok.getLexicoComp())){
            production+="q8 --> q9 con LLAVE_A ( { )\n";
            posicion++;}else {
            production+="q8 --> X\n";
             qError("LLAVE_A ({)"); return false;}//else q1
            break;
            case 9:
                production+="q9 --> q10 con SENTENCIA \n";
                sen=controlSENTENCIA();
                //sen=autDECLARACION();
                production+="CONTINUACION SENTENCIA SI \n";
                if(sen==true){}
                if(sen==false){/*qError("Sentencia erroneea dentro del si");*/return false;}
           
            break;
            
            case 10:
            if("LLAVE_C".equals(tok.getLexicoComp())){
            production+="q10 --> q11 con LLAVE_C (})\n";
            posicion++;
            estado=true;
            }else{
            production+="q10 --> X\n";
            qError("LLAVE_C (})");return false;}//else q3
            break;
            default:
                
                break;
            }    
            q++;
        }//while
        
         System.out.println("production = " + production);
        return true;
    }
     
    //////////////////automata estructura repetir
     public boolean autREPETIR(){
         production+="SENTENCIA REPETIR \n";
         boolean sen,con;
        int q=0;
        
        while(q<7){
            tokenSintac tok=(tokenSintac) tksintac.get(posicion);
            switch(q){
            case 0:
            if("REPETIR".equals(tok.getLexicoComp())){
            production+="q0 --> q1 con REPETIR\n";
            posicion++; }else{
            production+="q0 --> X\n";
             qError("REPETIR");return false;}//else q0
            break;
            case 1:
            if("PARENTESIS_A".equals(tok.getLexicoComp())){
            production+="q1 --> q2 con PARENTESIS_A\n";
            posicion++; }else{
            production+="q1 --> X\n";
             qError("PARENTESIS_A");return false;}//else q0
            break;
            case 2:
                production+="q2 --> q3 con CONDICION \n";
               con=autCONDICIONAL();
               production+="CONTINUACION SENTENCIA REPETIR \n";
                if(con==true){}
                if(con==false){/*qError("Estructura condicional erronea");*/return false;}
                break;
            case 3:
            if("PARENTESIS_C".equals(tok.getLexicoComp())){
            production+="q3 --> q4 con PARENTESIS_C\n";
            posicion++; }else{
            production+="q3 --> X\n";
             qError("PARENTESIS_C");return false;}//else q0
            break;
            
            case 4:
             if("LLAVE_A".equals(tok.getLexicoComp())){
            production+="q4 --> q5 con LLAVE_A ( { )\n";
            posicion++;}else {
            production+="q4 --> X\n";
             qError("LLAVE_A ({)"); return false;}//else q1
            break;
            case 5:
                production+="q5 --> q6 con SENTENCIA \n";
                sen=controlSENTENCIA();
                //sen=autDECLARACION();
                production+="CONTINUACION SENTENCIA REPETIR \n";
                if(sen==true){}
                if(sen==false){/*qError("Sentencia erroneea dentro del si");*/return false;}
           
            break;
            case 6:
            if("LLAVE_C".equals(tok.getLexicoComp())){
            production+="q6 --> q7 con LLAVE_C (})\n";
            posicion++;
            estado=true;
            }else{
            production+="q6 --> X\n";
            qError("LLAVE_C (})");return false;}//else q3
            break;
            default:
                
                break;
            }    
            q++;
        }//while
        
         System.out.println("production = " + production);
        return true;
    }
     
    public boolean controlSENTENCIA(){
         boolean ctrl=true;
         boolean sente=true;
         while(ctrl==true){//&& posicion<tksintac.size()
        tokenSintac tok=(tokenSintac) tksintac.get(posicion);
        String toke =tok.getLexicoComp();
        switch(toke){
            case "TIPO_DATO":
                sente=autDECLARACION();
                break;
            case "CADENA":
                sente=autDECLARACIOCAD();
                break;
            case "ESTRUCTURA_SI":
                
               sente=autSI();
                
                break;
            case "ACCION_NOTIFICAR":
                sente=autNOTIFICACION();
                break;
            
            case "REPETIR":
                sente=autREPETIR();
                break;
            case "ACCION_CONTROL":
                sente=autDISPOSITIVOS();
                break;
            case "ACCION_MEDIR":
                sente=autMEDICIONES();
                break;  
            case "IDENTIFICADOR":
                sente=autOPERACIONES();
                break;
            case "LLAVE_C":
                ctrl=false;
                
                return true;
            default:
                errores="error sintactico: No se esperaba ( "+tok.getLexema()
            +" ) en la linea y columa ["+tok.getLinea()+","+tok.getColumna()+"]";
            sente=false;
                break;
            }
                if(sente==false)return false;
       
        }//wuile
        return true; 
     }
    
    //////////////////////automata estructura condicional
    public boolean autCONDICIONAL(){
        production+="ESTRUCTURA CONDICIONAL \n";
        
        int q=0;
        while(q<4){
            tokenSintac tok=(tokenSintac) tksintac.get(posicion);
            
            switch(q){
            case 0:
                System.out.println(tok.getLexicoComp());
            if("N_ENTERO".equals(tok.getLexicoComp())){
            production+="q0 --> q1 con NUMERO\n";
            posicion++;}else{
                if("IDENTIFICADOR".equals(tok.getLexicoComp()) ){
                 if(checkId(tok.getLexema())==0){
                qErrorSem("El identificador no se encuentra declarado");
                }
                production+="q0 --> q1 con IDENTIFICADOR\n";
                posicion++;}    
                    else{    
                    production+="q0 --> X\n";
                    qError("NUMERO o IDENTIFICADOR");return false;
                }
            }//else q0
            break;
            case 1:
            if("MENOR_QUE".equals(tok.getLexicoComp())|| "DIFERENTE_DE".equals(tok.getLexicoComp()) || "MAYOR_QUE".equals(tok.getLexicoComp())
                  ||  "MENOR_IGUAL_QUE".equals(tok.getLexicoComp()) || "MAYOR_IGUAL_QUE".equals(tok.getLexicoComp()) || "IGUAL_QUE".equals(tok.getLexicoComp()) || "DIFERENTE_DE".equals(tok.getLexicoComp()) ){
            production+="q1 --> q2 con OP_LOGICO\n";
            posicion++;}else {    
                    production+="q1 --> X\n";
                    qError(tok.getLexicoComp());return false;}//else q1
            
            break;
            case 2:
            if("N_ENTERO".equals(tok.getLexicoComp())){
            production+="q2 --> q3 con NUMERO\n";
            posicion++;}else{
                if("IDENTIFICADOR".equals(tok.getLexicoComp()) ){
                     if(checkId(tok.getLexema())==0){
                qErrorSem("El identificador no se encuentra declarado");
                }
                production+="q2 --> q3 con IDENTIFICADOR\n";
                posicion++;}    
                    else{    
                    production+="q2 --> X\n";
                    qError("NUMERO o IDENTIFICADOR");return false;
            
                }
            }//else q0
            break;
            case 3:
            if("OP_LOGICO".equals(tok.getLexicoComp()) ){
            production+="q3 --> q4 con OP_LOGICO\n";
            posicion++;
            production+="q4 --> q0 \n";
            q=-1;}else {    
                    return true;
                }//else q1
            break;
            default:
                break;
            }    
            q++;
        }//while
        
        return true;
    }
    public void qError(String esperado){
        
        System.out.println("entra a error");
        tokenSintac tok=(tokenSintac) tksintac.get(posicion-1);
        
           errores="error sintactico: se esperaba un "+esperado+" despues de el token ( "+tok.getLexema()
            +" ) en la linea y columa ["+tok.getLinea()+","+tok.getColumna()+"]";
           estado=false;
    }
    
    public void qErrorSem(String esperado){
        
        System.out.println("entra a error");
        tokenSintac tok=(tokenSintac) tksintac.get(posicion-1);
        
           errores="Error Semantico: "+" en la linea y columa ["+tok.getLinea()+","+tok.getColumna()+"], "+esperado;
           estado=false;
    }
    
    public int checkId(String idm){
        for (idControl ids : identCotrol) {
            if(ids.getId().equals(idm)){
                return 1;//ya esta inicializado
            }
          }  
        return 0;
    }
    
    public int checktipDatId(String idm, String dat){
        for (idControl ids : identCotrol) {
            if(ids.getId().equals(idm)){
                if(ids.getTipoDato().equals(dat)){
                   return 0;//tipo de dato correcto 
                }
                return 1; //el tipo de dato no es correcto
            }
          }  
        return 2;//id no inicializado
    }
    
    
    private void SemanticAnalisis() {

    }

    private void ImprimirConsola() {
        int sizeErrors = errors.size();
        if (errores==null) {
            txaErrores.setText("Compilacion terminada");
            
        } else {
            txaErrores.setText(errores);
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel(new FlatIntelliJLaf());

                new Compilador().setVisible(true);
            } catch (UnsupportedLookAndFeelException ex) {
                Logger.getLogger(Compilador.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        );
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnCompilar;
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnGuardarC;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSimbolos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jspZomm;
    private javax.swing.JTextPane jtpEscritorio;
    private javax.swing.JTable tblLexemas;
    private java.awt.TextArea txaErrores;
    // End of variables declaration//GEN-END:variables
}
